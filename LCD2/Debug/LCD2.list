
LCD2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025d4  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002690  08002690  00012690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026e0  080026e0  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080026e0  080026e0  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026e0  080026e0  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e4  080026e4  000126e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080026e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000001c  08002704  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  08002704  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d0  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bc6  00000000  00000000  0002c114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0002dce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b873  00000000  00000000  0002f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000caca  00000000  00000000  0004abcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b4775  00000000  00000000  00057695  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010be0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002954  00000000  00000000  0010be60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000001c 	.word	0x2000001c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002678 	.word	0x08002678

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000020 	.word	0x20000020
 8000100:	08002678 	.word	0x08002678

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <delay>:
#define timer htim1


extern TIM_HandleTypeDef timer;
void delay (uint16_t us)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b082      	sub	sp, #8
 8000220:	af00      	add	r7, sp, #0
 8000222:	0002      	movs	r2, r0
 8000224:	1dbb      	adds	r3, r7, #6
 8000226:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&timer, 0);
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <delay+0x30>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&timer) < us);
 8000230:	46c0      	nop			; (mov r8, r8)
 8000232:	4b06      	ldr	r3, [pc, #24]	; (800024c <delay+0x30>)
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000238:	1dbb      	adds	r3, r7, #6
 800023a:	881b      	ldrh	r3, [r3, #0]
 800023c:	429a      	cmp	r2, r3
 800023e:	d3f8      	bcc.n	8000232 <delay+0x16>
}
 8000240:	46c0      	nop			; (mov r8, r8)
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	46bd      	mov	sp, r7
 8000246:	b002      	add	sp, #8
 8000248:	bd80      	pop	{r7, pc}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	20000070 	.word	0x20000070

08000250 <send_to_lcd>:

/****************************************************************************************************************************************************************/

void send_to_lcd (char data, int rs)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	0002      	movs	r2, r0
 8000258:	6039      	str	r1, [r7, #0]
 800025a:	1dfb      	adds	r3, r7, #7
 800025c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(lcd_gpio[RS].gpio, lcd_gpio[RS].pin, rs);  // rs = 1 for data, rs=0 for command
 800025e:	4b2c      	ldr	r3, [pc, #176]	; (8000310 <send_to_lcd+0xc0>)
 8000260:	6818      	ldr	r0, [r3, #0]
 8000262:	4b2b      	ldr	r3, [pc, #172]	; (8000310 <send_to_lcd+0xc0>)
 8000264:	889b      	ldrh	r3, [r3, #4]
 8000266:	683a      	ldr	r2, [r7, #0]
 8000268:	b2d2      	uxtb	r2, r2
 800026a:	0019      	movs	r1, r3
 800026c:	f000 ff00 	bl	8001070 <HAL_GPIO_WritePin>

	/* write the data to the respective pin */
	HAL_GPIO_WritePin(lcd_gpio[D7].gpio, lcd_gpio[D7].pin, ((data>>3)&0x01));
 8000270:	4b27      	ldr	r3, [pc, #156]	; (8000310 <send_to_lcd+0xc0>)
 8000272:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000274:	4b26      	ldr	r3, [pc, #152]	; (8000310 <send_to_lcd+0xc0>)
 8000276:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8000278:	1dfb      	adds	r3, r7, #7
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	08db      	lsrs	r3, r3, #3
 800027e:	b2db      	uxtb	r3, r3
 8000280:	2201      	movs	r2, #1
 8000282:	4013      	ands	r3, r2
 8000284:	b2db      	uxtb	r3, r3
 8000286:	001a      	movs	r2, r3
 8000288:	f000 fef2 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_gpio[D6].gpio, lcd_gpio[D6].pin, ((data>>2)&0x01));
 800028c:	4b20      	ldr	r3, [pc, #128]	; (8000310 <send_to_lcd+0xc0>)
 800028e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <send_to_lcd+0xc0>)
 8000292:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	089b      	lsrs	r3, r3, #2
 800029a:	b2db      	uxtb	r3, r3
 800029c:	2201      	movs	r2, #1
 800029e:	4013      	ands	r3, r2
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	001a      	movs	r2, r3
 80002a4:	f000 fee4 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_gpio[D5].gpio, lcd_gpio[D5].pin, ((data>>1)&0x01));
 80002a8:	4b19      	ldr	r3, [pc, #100]	; (8000310 <send_to_lcd+0xc0>)
 80002aa:	6a18      	ldr	r0, [r3, #32]
 80002ac:	4b18      	ldr	r3, [pc, #96]	; (8000310 <send_to_lcd+0xc0>)
 80002ae:	8c99      	ldrh	r1, [r3, #36]	; 0x24
 80002b0:	1dfb      	adds	r3, r7, #7
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	085b      	lsrs	r3, r3, #1
 80002b6:	b2db      	uxtb	r3, r3
 80002b8:	2201      	movs	r2, #1
 80002ba:	4013      	ands	r3, r2
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	001a      	movs	r2, r3
 80002c0:	f000 fed6 	bl	8001070 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd_gpio[D4].gpio, lcd_gpio[D4].pin, ((data>>0)&0x01));
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <send_to_lcd+0xc0>)
 80002c6:	6998      	ldr	r0, [r3, #24]
 80002c8:	4b11      	ldr	r3, [pc, #68]	; (8000310 <send_to_lcd+0xc0>)
 80002ca:	8b99      	ldrh	r1, [r3, #28]
 80002cc:	1dfb      	adds	r3, r7, #7
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	2201      	movs	r2, #1
 80002d2:	4013      	ands	r3, r2
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	001a      	movs	r2, r3
 80002d8:	f000 feca 	bl	8001070 <HAL_GPIO_WritePin>

	/* Toggle EN PIN to send the data
	 * if the HCLK > 100 MHz, use the  20 us delay
	 * if the LCD still doesn't work, increase the delay to 50, 80 or 100..
	 */
	HAL_GPIO_WritePin(lcd_gpio[E].gpio, lcd_gpio[E].pin, 1);
 80002dc:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <send_to_lcd+0xc0>)
 80002de:	6918      	ldr	r0, [r3, #16]
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <send_to_lcd+0xc0>)
 80002e2:	8a9b      	ldrh	r3, [r3, #20]
 80002e4:	2201      	movs	r2, #1
 80002e6:	0019      	movs	r1, r3
 80002e8:	f000 fec2 	bl	8001070 <HAL_GPIO_WritePin>
	delay (20);
 80002ec:	2014      	movs	r0, #20
 80002ee:	f7ff ff95 	bl	800021c <delay>
	HAL_GPIO_WritePin(lcd_gpio[E].gpio, lcd_gpio[E].pin, 0);
 80002f2:	4b07      	ldr	r3, [pc, #28]	; (8000310 <send_to_lcd+0xc0>)
 80002f4:	6918      	ldr	r0, [r3, #16]
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <send_to_lcd+0xc0>)
 80002f8:	8a9b      	ldrh	r3, [r3, #20]
 80002fa:	2200      	movs	r2, #0
 80002fc:	0019      	movs	r1, r3
 80002fe:	f000 feb7 	bl	8001070 <HAL_GPIO_WritePin>
	delay (20);
 8000302:	2014      	movs	r0, #20
 8000304:	f7ff ff8a 	bl	800021c <delay>
}
 8000308:	46c0      	nop			; (mov r8, r8)
 800030a:	46bd      	mov	sp, r7
 800030c:	b002      	add	sp, #8
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000038 	.word	0x20000038

08000314 <lcd_send_cmd>:

void lcd_send_cmd (char cmd)
{
 8000314:	b590      	push	{r4, r7, lr}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	0002      	movs	r2, r0
 800031c:	1dfb      	adds	r3, r7, #7
 800031e:	701a      	strb	r2, [r3, #0]
    char datatosend;

    /* send upper nibble first */
    datatosend = ((cmd>>4)&0x0f);
 8000320:	200f      	movs	r0, #15
 8000322:	183b      	adds	r3, r7, r0
 8000324:	1dfa      	adds	r2, r7, #7
 8000326:	7812      	ldrb	r2, [r2, #0]
 8000328:	0912      	lsrs	r2, r2, #4
 800032a:	701a      	strb	r2, [r3, #0]
    send_to_lcd(datatosend,0);  // RS must be 0 while sending command
 800032c:	0004      	movs	r4, r0
 800032e:	183b      	adds	r3, r7, r0
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2100      	movs	r1, #0
 8000334:	0018      	movs	r0, r3
 8000336:	f7ff ff8b 	bl	8000250 <send_to_lcd>

    /* send Lower Nibble */
    datatosend = ((cmd)&0x0f);
 800033a:	0020      	movs	r0, r4
 800033c:	183b      	adds	r3, r7, r0
 800033e:	1dfa      	adds	r2, r7, #7
 8000340:	7812      	ldrb	r2, [r2, #0]
 8000342:	210f      	movs	r1, #15
 8000344:	400a      	ands	r2, r1
 8000346:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 0);
 8000348:	183b      	adds	r3, r7, r0
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2100      	movs	r1, #0
 800034e:	0018      	movs	r0, r3
 8000350:	f7ff ff7e 	bl	8000250 <send_to_lcd>
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b005      	add	sp, #20
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <lcd_send_data>:

void lcd_send_data (char data)
{
 800035c:	b590      	push	{r4, r7, lr}
 800035e:	b085      	sub	sp, #20
 8000360:	af00      	add	r7, sp, #0
 8000362:	0002      	movs	r2, r0
 8000364:	1dfb      	adds	r3, r7, #7
 8000366:	701a      	strb	r2, [r3, #0]
	char datatosend;

	/* send higher nibble */
	datatosend = ((data>>4)&0x0f);
 8000368:	200f      	movs	r0, #15
 800036a:	183b      	adds	r3, r7, r0
 800036c:	1dfa      	adds	r2, r7, #7
 800036e:	7812      	ldrb	r2, [r2, #0]
 8000370:	0912      	lsrs	r2, r2, #4
 8000372:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);  // rs =1 for sending data
 8000374:	0004      	movs	r4, r0
 8000376:	183b      	adds	r3, r7, r0
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2101      	movs	r1, #1
 800037c:	0018      	movs	r0, r3
 800037e:	f7ff ff67 	bl	8000250 <send_to_lcd>

	/* send Lower nibble */
	datatosend = ((data)&0x0f);
 8000382:	0020      	movs	r0, r4
 8000384:	183b      	adds	r3, r7, r0
 8000386:	1dfa      	adds	r2, r7, #7
 8000388:	7812      	ldrb	r2, [r2, #0]
 800038a:	210f      	movs	r1, #15
 800038c:	400a      	ands	r2, r1
 800038e:	701a      	strb	r2, [r3, #0]
	send_to_lcd(datatosend, 1);
 8000390:	183b      	adds	r3, r7, r0
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2101      	movs	r1, #1
 8000396:	0018      	movs	r0, r3
 8000398:	f7ff ff5a 	bl	8000250 <send_to_lcd>
}
 800039c:	46c0      	nop			; (mov r8, r8)
 800039e:	46bd      	mov	sp, r7
 80003a0:	b005      	add	sp, #20
 80003a2:	bd90      	pop	{r4, r7, pc}

080003a4 <lcd_clear>:

void lcd_clear (void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	lcd_send_cmd(0x01);
 80003a8:	2001      	movs	r0, #1
 80003aa:	f7ff ffb3 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(2);
 80003ae:	2002      	movs	r0, #2
 80003b0:	f000 fbda 	bl	8000b68 <HAL_Delay>
}
 80003b4:	46c0      	nop			; (mov r8, r8)
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}

080003ba <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80003ba:	b580      	push	{r7, lr}
 80003bc:	b082      	sub	sp, #8
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	6039      	str	r1, [r7, #0]
    switch (row)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d01d      	beq.n	8000406 <lcd_put_cur+0x4c>
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	dc1e      	bgt.n	800040e <lcd_put_cur+0x54>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	d013      	beq.n	80003fe <lcd_put_cur+0x44>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	2b02      	cmp	r3, #2
 80003da:	dc18      	bgt.n	800040e <lcd_put_cur+0x54>
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d003      	beq.n	80003ea <lcd_put_cur+0x30>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	2b01      	cmp	r3, #1
 80003e6:	d005      	beq.n	80003f4 <lcd_put_cur+0x3a>
 80003e8:	e011      	b.n	800040e <lcd_put_cur+0x54>
    {
        case 0:
            col |= 0x80;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	2280      	movs	r2, #128	; 0x80
 80003ee:	4313      	orrs	r3, r2
 80003f0:	603b      	str	r3, [r7, #0]
            break;
 80003f2:	e00c      	b.n	800040e <lcd_put_cur+0x54>
        case 1:
            col |= 0xC0;
 80003f4:	683b      	ldr	r3, [r7, #0]
 80003f6:	22c0      	movs	r2, #192	; 0xc0
 80003f8:	4313      	orrs	r3, r2
 80003fa:	603b      	str	r3, [r7, #0]
            break;
 80003fc:	e007      	b.n	800040e <lcd_put_cur+0x54>
        case 2:
        	col += 0x94;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	3394      	adds	r3, #148	; 0x94
 8000402:	603b      	str	r3, [r7, #0]
        	break;
 8000404:	e003      	b.n	800040e <lcd_put_cur+0x54>
        case 3:
        	col += 0xD4;
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	33d4      	adds	r3, #212	; 0xd4
 800040a:	603b      	str	r3, [r7, #0]
        	break;
 800040c:	46c0      	nop			; (mov r8, r8)
    }

    lcd_send_cmd (col);
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	b2db      	uxtb	r3, r3
 8000412:	0018      	movs	r0, r3
 8000414:	f7ff ff7e 	bl	8000314 <lcd_send_cmd>
}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b002      	add	sp, #8
 800041e:	bd80      	pop	{r7, pc}

08000420 <lcd_init>:


void lcd_init (void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000424:	2032      	movs	r0, #50	; 0x32
 8000426:	f000 fb9f 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x30);
 800042a:	2030      	movs	r0, #48	; 0x30
 800042c:	f7ff ff72 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000430:	2005      	movs	r0, #5
 8000432:	f000 fb99 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000436:	2030      	movs	r0, #48	; 0x30
 8000438:	f7ff ff6c 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800043c:	2001      	movs	r0, #1
 800043e:	f000 fb93 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000442:	2030      	movs	r0, #48	; 0x30
 8000444:	f7ff ff66 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(10);
 8000448:	200a      	movs	r0, #10
 800044a:	f000 fb8d 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800044e:	2020      	movs	r0, #32
 8000450:	f7ff ff60 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(10);
 8000454:	200a      	movs	r0, #10
 8000456:	f000 fb87 	bl	8000b68 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800045a:	2028      	movs	r0, #40	; 0x28
 800045c:	f7ff ff5a 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(1);
 8000460:	2001      	movs	r0, #1
 8000462:	f000 fb81 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000466:	2008      	movs	r0, #8
 8000468:	f7ff ff54 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(1);
 800046c:	2001      	movs	r0, #1
 800046e:	f000 fb7b 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000472:	2001      	movs	r0, #1
 8000474:	f7ff ff4e 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(1);
 8000478:	2001      	movs	r0, #1
 800047a:	f000 fb75 	bl	8000b68 <HAL_Delay>
	HAL_Delay(1);
 800047e:	2001      	movs	r0, #1
 8000480:	f000 fb72 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000484:	2006      	movs	r0, #6
 8000486:	f7ff ff45 	bl	8000314 <lcd_send_cmd>
	HAL_Delay(1);
 800048a:	2001      	movs	r0, #1
 800048c:	f000 fb6c 	bl	8000b68 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000490:	200c      	movs	r0, #12
 8000492:	f7ff ff3f 	bl	8000314 <lcd_send_cmd>
}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}

0800049c <lcd_attr_gpio>:

void lcd_attr_gpio(lcd_pin_e lcd, GPIO_TypeDef *gpio, uint16_t pin){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6039      	str	r1, [r7, #0]
 80004a4:	0011      	movs	r1, r2
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	1c02      	adds	r2, r0, #0
 80004aa:	701a      	strb	r2, [r3, #0]
 80004ac:	1d3b      	adds	r3, r7, #4
 80004ae:	1c0a      	adds	r2, r1, #0
 80004b0:	801a      	strh	r2, [r3, #0]
	if (lcd < LCD_QTD){
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b06      	cmp	r3, #6
 80004b8:	d80e      	bhi.n	80004d8 <lcd_attr_gpio+0x3c>
		lcd_gpio[lcd].gpio = gpio;
 80004ba:	1dfb      	adds	r3, r7, #7
 80004bc:	781a      	ldrb	r2, [r3, #0]
 80004be:	4b08      	ldr	r3, [pc, #32]	; (80004e0 <lcd_attr_gpio+0x44>)
 80004c0:	00d2      	lsls	r2, r2, #3
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	50d1      	str	r1, [r2, r3]
		lcd_gpio[lcd].pin = pin;
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <lcd_attr_gpio+0x44>)
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	18d3      	adds	r3, r2, r3
 80004d0:	3304      	adds	r3, #4
 80004d2:	1d3a      	adds	r2, r7, #4
 80004d4:	8812      	ldrh	r2, [r2, #0]
 80004d6:	801a      	strh	r2, [r3, #0]
	}
}
 80004d8:	46c0      	nop			; (mov r8, r8)
 80004da:	46bd      	mov	sp, r7
 80004dc:	b002      	add	sp, #8
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000038 	.word	0x20000038

080004e4 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80004ec:	e006      	b.n	80004fc <lcd_send_string+0x18>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	607a      	str	r2, [r7, #4]
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ff30 	bl	800035c <lcd_send_data>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d1f4      	bne.n	80004ee <lcd_send_string+0xa>
}
 8000504:	46c0      	nop			; (mov r8, r8)
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b002      	add	sp, #8
 800050c:	bd80      	pop	{r7, pc}

0800050e <HAL_GPIO_EXTI_Rising_Callback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 800050e:	b580      	push	{r7, lr}
 8000510:	b082      	sub	sp, #8
 8000512:	af00      	add	r7, sp, #0
 8000514:	0002      	movs	r2, r0
 8000516:	1dbb      	adds	r3, r7, #6
 8000518:	801a      	strh	r2, [r3, #0]
	 lcd_clear();
 800051a:	f7ff ff43 	bl	80003a4 <lcd_clear>
}
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b002      	add	sp, #8
 8000524:	bd80      	pop	{r7, pc}
	...

08000528 <__init_application>:
void __init_application(){
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <__init_application+0xac>)
 800052e:	2200      	movs	r2, #0
 8000530:	801a      	strh	r2, [r3, #0]
	  memset(&app, 0, sizeof(app_t));

	  HAL_TIM_Base_Start(&htim1);
 8000532:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <__init_application+0xb0>)
 8000534:	0018      	movs	r0, r3
 8000536:	f001 fdb1 	bl	800209c <HAL_TIM_Base_Start>

	  lcd_attr_gpio(RS, RS_GPIO_Port, RS_Pin);
 800053a:	2380      	movs	r3, #128	; 0x80
 800053c:	009a      	lsls	r2, r3, #2
 800053e:	23a0      	movs	r3, #160	; 0xa0
 8000540:	05db      	lsls	r3, r3, #23
 8000542:	0019      	movs	r1, r3
 8000544:	2000      	movs	r0, #0
 8000546:	f7ff ffa9 	bl	800049c <lcd_attr_gpio>
	  lcd_attr_gpio(RW, RW_GPIO_Port, RW_Pin);
 800054a:	2380      	movs	r3, #128	; 0x80
 800054c:	005a      	lsls	r2, r3, #1
 800054e:	23a0      	movs	r3, #160	; 0xa0
 8000550:	05db      	lsls	r3, r3, #23
 8000552:	0019      	movs	r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	f7ff ffa1 	bl	800049c <lcd_attr_gpio>
	  lcd_attr_gpio(E, E_GPIO_Port, E_Pin);
 800055a:	4b20      	ldr	r3, [pc, #128]	; (80005dc <__init_application+0xb4>)
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	0019      	movs	r1, r3
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff ff9b 	bl	800049c <lcd_attr_gpio>

	  lcd_attr_gpio(D4, D4_GPIO_Port, D4_Pin);
 8000566:	4b1e      	ldr	r3, [pc, #120]	; (80005e0 <__init_application+0xb8>)
 8000568:	2201      	movs	r2, #1
 800056a:	0019      	movs	r1, r3
 800056c:	2003      	movs	r0, #3
 800056e:	f7ff ff95 	bl	800049c <lcd_attr_gpio>
	  lcd_attr_gpio(D5, D5_GPIO_Port, D5_Pin);
 8000572:	23a0      	movs	r3, #160	; 0xa0
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	0019      	movs	r1, r3
 800057a:	2004      	movs	r0, #4
 800057c:	f7ff ff8e 	bl	800049c <lcd_attr_gpio>
	  lcd_attr_gpio(D6, D6_GPIO_Port, D6_Pin);
 8000580:	23a0      	movs	r3, #160	; 0xa0
 8000582:	05db      	lsls	r3, r3, #23
 8000584:	2240      	movs	r2, #64	; 0x40
 8000586:	0019      	movs	r1, r3
 8000588:	2005      	movs	r0, #5
 800058a:	f7ff ff87 	bl	800049c <lcd_attr_gpio>
	  lcd_attr_gpio(D7, D7_GPIO_Port, D7_Pin);
 800058e:	23a0      	movs	r3, #160	; 0xa0
 8000590:	05db      	lsls	r3, r3, #23
 8000592:	2220      	movs	r2, #32
 8000594:	0019      	movs	r1, r3
 8000596:	2006      	movs	r0, #6
 8000598:	f7ff ff80 	bl	800049c <lcd_attr_gpio>

	  lcd_init();
 800059c:	f7ff ff40 	bl	8000420 <lcd_init>
	  lcd_clear();
 80005a0:	f7ff ff00 	bl	80003a4 <lcd_clear>

	  lcd_put_cur(1, 4);
 80005a4:	2104      	movs	r1, #4
 80005a6:	2001      	movs	r0, #1
 80005a8:	f7ff ff07 	bl	80003ba <lcd_put_cur>
	  lcd_send_string("PADO");
 80005ac:	4b0d      	ldr	r3, [pc, #52]	; (80005e4 <__init_application+0xbc>)
 80005ae:	0018      	movs	r0, r3
 80005b0:	f7ff ff98 	bl	80004e4 <lcd_send_string>

	  lcd_put_cur(2, 4);
 80005b4:	2104      	movs	r1, #4
 80005b6:	2002      	movs	r0, #2
 80005b8:	f7ff feff 	bl	80003ba <lcd_put_cur>
	  lcd_send_string("LABS");
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <__init_application+0xc0>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ff90 	bl	80004e4 <lcd_send_string>
	  HAL_Delay(1000);
 80005c4:	23fa      	movs	r3, #250	; 0xfa
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 facd 	bl	8000b68 <HAL_Delay>
}
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200000be 	.word	0x200000be
 80005d8:	20000070 	.word	0x20000070
 80005dc:	50000800 	.word	0x50000800
 80005e0:	50000400 	.word	0x50000400
 80005e4:	08002690 	.word	0x08002690
 80005e8:	08002698 	.word	0x08002698

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f000 fa34 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f816 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 f8ce 	bl	8000798 <MX_GPIO_Init>
  MX_TIM1_Init();
 80005fc:	f000 f870 	bl	80006e0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
__init_application();
 8000600:	f7ff ff92 	bl	8000528 <__init_application>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  lcd_put_cur(0,0);
 8000604:	2100      	movs	r1, #0
 8000606:	2000      	movs	r0, #0
 8000608:	f7ff fed7 	bl	80003ba <lcd_put_cur>
	  lcd_send_string(i);
 800060c:	4b04      	ldr	r3, [pc, #16]	; (8000620 <main+0x34>)
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff ff68 	bl	80004e4 <lcd_send_string>
	  HAL_Delay(1000);
 8000614:	23fa      	movs	r3, #250	; 0xfa
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	0018      	movs	r0, r3
 800061a:	f000 faa5 	bl	8000b68 <HAL_Delay>
	  lcd_put_cur(0,0);
 800061e:	e7f1      	b.n	8000604 <main+0x18>
 8000620:	20000000 	.word	0x20000000

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b590      	push	{r4, r7, lr}
 8000626:	b095      	sub	sp, #84	; 0x54
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	2414      	movs	r4, #20
 800062c:	193b      	adds	r3, r7, r4
 800062e:	0018      	movs	r0, r3
 8000630:	233c      	movs	r3, #60	; 0x3c
 8000632:	001a      	movs	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f002 f817 	bl	8002668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	2310      	movs	r3, #16
 8000640:	001a      	movs	r2, r3
 8000642:	2100      	movs	r1, #0
 8000644:	f002 f810 	bl	8002668 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fd61 	bl	8001114 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	193b      	adds	r3, r7, r4
 8000654:	2202      	movs	r2, #2
 8000656:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000658:	193b      	adds	r3, r7, r4
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0052      	lsls	r2, r2, #1
 800065e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000660:	0021      	movs	r1, r4
 8000662:	187b      	adds	r3, r7, r1
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2240      	movs	r2, #64	; 0x40
 800066c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2202      	movs	r2, #2
 8000672:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000674:	187b      	adds	r3, r7, r1
 8000676:	2202      	movs	r2, #2
 8000678:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2200      	movs	r2, #0
 800067e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000680:	187b      	adds	r3, r7, r1
 8000682:	2208      	movs	r2, #8
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000686:	187b      	adds	r3, r7, r1
 8000688:	2280      	movs	r2, #128	; 0x80
 800068a:	0292      	lsls	r2, r2, #10
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068e:	187b      	adds	r3, r7, r1
 8000690:	2280      	movs	r2, #128	; 0x80
 8000692:	0492      	lsls	r2, r2, #18
 8000694:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000696:	187b      	adds	r3, r7, r1
 8000698:	2280      	movs	r2, #128	; 0x80
 800069a:	0592      	lsls	r2, r2, #22
 800069c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	0018      	movs	r0, r3
 80006a2:	f000 fd77 	bl	8001194 <HAL_RCC_OscConfig>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006aa:	f000 f923 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	2207      	movs	r2, #7
 80006b2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2202      	movs	r2, #2
 80006b8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2102      	movs	r1, #2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 f8c8 	bl	8001860 <HAL_RCC_ClockConfig>
 80006d0:	1e03      	subs	r3, r0, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006d4:	f000 f90e 	bl	80008f4 <Error_Handler>
  }
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b015      	add	sp, #84	; 0x54
 80006de:	bd90      	pop	{r4, r7, pc}

080006e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006e6:	2310      	movs	r3, #16
 80006e8:	18fb      	adds	r3, r7, r3
 80006ea:	0018      	movs	r0, r3
 80006ec:	2310      	movs	r3, #16
 80006ee:	001a      	movs	r2, r3
 80006f0:	2100      	movs	r1, #0
 80006f2:	f001 ffb9 	bl	8002668 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	230c      	movs	r3, #12
 80006fc:	001a      	movs	r2, r3
 80006fe:	2100      	movs	r1, #0
 8000700:	f001 ffb2 	bl	8002668 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000704:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_TIM1_Init+0xac>)
 8000706:	4a22      	ldr	r2, [pc, #136]	; (8000790 <MX_TIM1_Init+0xb0>)
 8000708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 800070a:	4b20      	ldr	r3, [pc, #128]	; (800078c <MX_TIM1_Init+0xac>)
 800070c:	223f      	movs	r2, #63	; 0x3f
 800070e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <MX_TIM1_Init+0xac>)
 8000712:	2200      	movs	r2, #0
 8000714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8000716:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_TIM1_Init+0xac>)
 8000718:	4a1e      	ldr	r2, [pc, #120]	; (8000794 <MX_TIM1_Init+0xb4>)
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_TIM1_Init+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_TIM1_Init+0xac>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_TIM1_Init+0xac>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_TIM1_Init+0xac>)
 8000730:	0018      	movs	r0, r3
 8000732:	f001 fc5b 	bl	8001fec <HAL_TIM_Base_Init>
 8000736:	1e03      	subs	r3, r0, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 800073a:	f000 f8db 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073e:	2110      	movs	r1, #16
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2280      	movs	r2, #128	; 0x80
 8000744:	0152      	lsls	r2, r2, #5
 8000746:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000748:	187a      	adds	r2, r7, r1
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <MX_TIM1_Init+0xac>)
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fcfe 	bl	8002150 <HAL_TIM_ConfigClockSource>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000758:	f000 f8cc 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076e:	1d3a      	adds	r2, r7, #4
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_TIM1_Init+0xac>)
 8000772:	0011      	movs	r1, r2
 8000774:	0018      	movs	r0, r3
 8000776:	f001 fedd 	bl	8002534 <HAL_TIMEx_MasterConfigSynchronization>
 800077a:	1e03      	subs	r3, r0, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800077e:	f000 f8b9 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b008      	add	sp, #32
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000070 	.word	0x20000070
 8000790:	40012c00 	.word	0x40012c00
 8000794:	0000fffe 	.word	0x0000fffe

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b08b      	sub	sp, #44	; 0x2c
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	2414      	movs	r4, #20
 80007a0:	193b      	adds	r3, r7, r4
 80007a2:	0018      	movs	r0, r3
 80007a4:	2314      	movs	r3, #20
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f001 ff5d 	bl	8002668 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b4e      	ldr	r3, [pc, #312]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007b2:	4b4d      	ldr	r3, [pc, #308]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007b4:	2104      	movs	r1, #4
 80007b6:	430a      	orrs	r2, r1
 80007b8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007be:	2204      	movs	r2, #4
 80007c0:	4013      	ands	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007c6:	4b48      	ldr	r3, [pc, #288]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007ca:	4b47      	ldr	r3, [pc, #284]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007cc:	2120      	movs	r1, #32
 80007ce:	430a      	orrs	r2, r1
 80007d0:	635a      	str	r2, [r3, #52]	; 0x34
 80007d2:	4b45      	ldr	r3, [pc, #276]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d6:	2220      	movs	r2, #32
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b42      	ldr	r3, [pc, #264]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e2:	4b41      	ldr	r3, [pc, #260]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007e4:	2101      	movs	r1, #1
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
 80007ea:	4b3f      	ldr	r3, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	2201      	movs	r2, #1
 80007f0:	4013      	ands	r3, r2
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b3c      	ldr	r3, [pc, #240]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007fa:	4b3b      	ldr	r3, [pc, #236]	; (80008e8 <MX_GPIO_Init+0x150>)
 80007fc:	2102      	movs	r1, #2
 80007fe:	430a      	orrs	r2, r1
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
 8000802:	4b39      	ldr	r3, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x150>)
 8000804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000806:	2202      	movs	r2, #2
 8000808:	4013      	ands	r3, r2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D7_Pin|D6_Pin|D5_Pin|RW_Pin
 800080e:	23f8      	movs	r3, #248	; 0xf8
 8000810:	0099      	lsls	r1, r3, #2
 8000812:	23a0      	movs	r3, #160	; 0xa0
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	2200      	movs	r2, #0
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fc29 	bl	8001070 <HAL_GPIO_WritePin>
                          |RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_RESET);
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0x154>)
 8000820:	2200      	movs	r2, #0
 8000822:	2101      	movs	r1, #1
 8000824:	0018      	movs	r0, r3
 8000826:	f000 fc23 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(E_GPIO_Port, E_Pin, GPIO_PIN_RESET);
 800082a:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <MX_GPIO_Init+0x158>)
 800082c:	2200      	movs	r2, #0
 800082e:	2180      	movs	r1, #128	; 0x80
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fc1d 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : bb_Pin */
  GPIO_InitStruct.Pin = bb_Pin;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0192      	lsls	r2, r2, #6
 800083c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800083e:	193b      	adds	r3, r7, r4
 8000840:	2288      	movs	r2, #136	; 0x88
 8000842:	0352      	lsls	r2, r2, #13
 8000844:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	193b      	adds	r3, r7, r4
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(bb_GPIO_Port, &GPIO_InitStruct);
 800084c:	193b      	adds	r3, r7, r4
 800084e:	4a28      	ldr	r2, [pc, #160]	; (80008f0 <MX_GPIO_Init+0x158>)
 8000850:	0019      	movs	r1, r3
 8000852:	0010      	movs	r0, r2
 8000854:	f000 faa0 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D6_Pin D5_Pin RW_Pin
                           RS_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D6_Pin|D5_Pin|RW_Pin
 8000858:	0021      	movs	r1, r4
 800085a:	193b      	adds	r3, r7, r4
 800085c:	22f8      	movs	r2, #248	; 0xf8
 800085e:	0092      	lsls	r2, r2, #2
 8000860:	601a      	str	r2, [r3, #0]
                          |RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000862:	000c      	movs	r4, r1
 8000864:	193b      	adds	r3, r7, r4
 8000866:	2201      	movs	r2, #1
 8000868:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086a:	193b      	adds	r3, r7, r4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	193b      	adds	r3, r7, r4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	193a      	adds	r2, r7, r4
 8000878:	23a0      	movs	r3, #160	; 0xa0
 800087a:	05db      	lsls	r3, r3, #23
 800087c:	0011      	movs	r1, r2
 800087e:	0018      	movs	r0, r3
 8000880:	f000 fa8a 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2201      	movs	r2, #1
 8000888:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000896:	193b      	adds	r3, r7, r4
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800089c:	193b      	adds	r3, r7, r4
 800089e:	4a13      	ldr	r2, [pc, #76]	; (80008ec <MX_GPIO_Init+0x154>)
 80008a0:	0019      	movs	r1, r3
 80008a2:	0010      	movs	r0, r2
 80008a4:	f000 fa78 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : E_Pin */
  GPIO_InitStruct.Pin = E_Pin;
 80008a8:	0021      	movs	r1, r4
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2201      	movs	r2, #1
 80008b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(E_GPIO_Port, &GPIO_InitStruct);
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <MX_GPIO_Init+0x158>)
 80008c6:	0019      	movs	r1, r3
 80008c8:	0010      	movs	r0, r2
 80008ca:	f000 fa65 	bl	8000d98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2007      	movs	r0, #7
 80008d4:	f000 fa2e 	bl	8000d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80008d8:	2007      	movs	r0, #7
 80008da:	f000 fa40 	bl	8000d5e <HAL_NVIC_EnableIRQ>

}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b00b      	add	sp, #44	; 0x2c
 80008e4:	bd90      	pop	{r4, r7, pc}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	40021000 	.word	0x40021000
 80008ec:	50000400 	.word	0x50000400
 80008f0:	50000800 	.word	0x50000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <HAL_MspInit+0x4c>)
 8000908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	2101      	movs	r1, #1
 800090e:	430a      	orrs	r2, r1
 8000910:	641a      	str	r2, [r3, #64]	; 0x40
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	2201      	movs	r2, #1
 8000918:	4013      	ands	r3, r2
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_MspInit+0x4c>)
 8000920:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000922:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_MspInit+0x4c>)
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	0549      	lsls	r1, r1, #21
 8000928:	430a      	orrs	r2, r1
 800092a:	63da      	str	r2, [r3, #60]	; 0x3c
 800092c:	4b07      	ldr	r3, [pc, #28]	; (800094c <HAL_MspInit+0x4c>)
 800092e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	055b      	lsls	r3, r3, #21
 8000934:	4013      	ands	r3, r2
 8000936:	603b      	str	r3, [r7, #0]
 8000938:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800093a:	23c0      	movs	r3, #192	; 0xc0
 800093c:	00db      	lsls	r3, r3, #3
 800093e:	0018      	movs	r0, r3
 8000940:	f000 f936 	bl	8000bb0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	46c0      	nop			; (mov r8, r8)
 8000946:	46bd      	mov	sp, r7
 8000948:	b002      	add	sp, #8
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000

08000950 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b097      	sub	sp, #92	; 0x5c
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000958:	240c      	movs	r4, #12
 800095a:	193b      	adds	r3, r7, r4
 800095c:	0018      	movs	r0, r3
 800095e:	234c      	movs	r3, #76	; 0x4c
 8000960:	001a      	movs	r2, r3
 8000962:	2100      	movs	r1, #0
 8000964:	f001 fe80 	bl	8002668 <memset>
  if(htim_base->Instance==TIM1)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a11      	ldr	r2, [pc, #68]	; (80009b4 <HAL_TIM_Base_MspInit+0x64>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d11c      	bne.n	80009ac <HAL_TIM_Base_MspInit+0x5c>
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000972:	193b      	adds	r3, r7, r4
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0392      	lsls	r2, r2, #14
 8000978:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800097a:	193b      	adds	r3, r7, r4
 800097c:	2200      	movs	r2, #0
 800097e:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000980:	193b      	adds	r3, r7, r4
 8000982:	0018      	movs	r0, r3
 8000984:	f001 f8f6 	bl	8001b74 <HAL_RCCEx_PeriphCLKConfig>
 8000988:	1e03      	subs	r3, r0, #0
 800098a:	d001      	beq.n	8000990 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 800098c:	f7ff ffb2 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_TIM_Base_MspInit+0x68>)
 8000992:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000994:	4b08      	ldr	r3, [pc, #32]	; (80009b8 <HAL_TIM_Base_MspInit+0x68>)
 8000996:	2180      	movs	r1, #128	; 0x80
 8000998:	0109      	lsls	r1, r1, #4
 800099a:	430a      	orrs	r2, r1
 800099c:	641a      	str	r2, [r3, #64]	; 0x40
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_TIM_Base_MspInit+0x68>)
 80009a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a2:	2380      	movs	r3, #128	; 0x80
 80009a4:	011b      	lsls	r3, r3, #4
 80009a6:	4013      	ands	r3, r2
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b017      	add	sp, #92	; 0x5c
 80009b2:	bd90      	pop	{r4, r7, pc}
 80009b4:	40012c00 	.word	0x40012c00
 80009b8:	40021000 	.word	0x40021000

080009bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <NMI_Handler+0x4>

080009c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <HardFault_Handler+0x4>

080009c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}

080009d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009d2:	b580      	push	{r7, lr}
 80009d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e0:	f000 f8a6 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e4:	46c0      	nop			; (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(bb_Pin);
 80009ee:	2380      	movs	r3, #128	; 0x80
 80009f0:	019b      	lsls	r3, r3, #6
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 fb5a 	bl	80010ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}

080009fe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a0c:	f7ff fff7 	bl	80009fe <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a10:	480c      	ldr	r0, [pc, #48]	; (8000a44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a12:	490d      	ldr	r1, [pc, #52]	; (8000a48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a14:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <LoopForever+0xe>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a18:	e002      	b.n	8000a20 <LoopCopyDataInit>

08000a1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a1e:	3304      	adds	r3, #4

08000a20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a24:	d3f9      	bcc.n	8000a1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a26:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a28:	4c0a      	ldr	r4, [pc, #40]	; (8000a54 <LoopForever+0x16>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a2c:	e001      	b.n	8000a32 <LoopFillZerobss>

08000a2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a30:	3204      	adds	r2, #4

08000a32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a34:	d3fb      	bcc.n	8000a2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a36:	f001 fdf3 	bl	8002620 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000a3a:	f7ff fdd7 	bl	80005ec <main>

08000a3e <LoopForever>:

LoopForever:
  b LoopForever
 8000a3e:	e7fe      	b.n	8000a3e <LoopForever>
  ldr   r0, =_estack
 8000a40:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a48:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a4c:	080026e8 	.word	0x080026e8
  ldr r2, =_sbss
 8000a50:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a54:	200000c4 	.word	0x200000c4

08000a58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC1_COMP_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	2200      	movs	r2, #0
 8000a66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x3c>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b0a      	ldr	r3, [pc, #40]	; (8000a98 <HAL_Init+0x3c>)
 8000a6e:	2180      	movs	r1, #128	; 0x80
 8000a70:	0049      	lsls	r1, r1, #1
 8000a72:	430a      	orrs	r2, r1
 8000a74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a76:	2003      	movs	r0, #3
 8000a78:	f000 f810 	bl	8000a9c <HAL_InitTick>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	e001      	b.n	8000a8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000a88:	f7ff ff3a 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
}
 8000a90:	0018      	movs	r0, r3
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b002      	add	sp, #8
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40022000 	.word	0x40022000

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa4:	230f      	movs	r3, #15
 8000aa6:	18fb      	adds	r3, r7, r3
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <HAL_InitTick+0x88>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d02b      	beq.n	8000b0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <HAL_InitTick+0x8c>)
 8000ab6:	681c      	ldr	r4, [r3, #0]
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_InitTick+0x88>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	0019      	movs	r1, r3
 8000abe:	23fa      	movs	r3, #250	; 0xfa
 8000ac0:	0098      	lsls	r0, r3, #2
 8000ac2:	f7ff fb1f 	bl	8000104 <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	0019      	movs	r1, r3
 8000aca:	0020      	movs	r0, r4
 8000acc:	f7ff fb1a 	bl	8000104 <__udivsi3>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f953 	bl	8000d7e <HAL_SYSTICK_Config>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d112      	bne.n	8000b02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2b03      	cmp	r3, #3
 8000ae0:	d80a      	bhi.n	8000af8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae2:	6879      	ldr	r1, [r7, #4]
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	425b      	negs	r3, r3
 8000ae8:	2200      	movs	r2, #0
 8000aea:	0018      	movs	r0, r3
 8000aec:	f000 f922 	bl	8000d34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <HAL_InitTick+0x90>)
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]
 8000af6:	e00d      	b.n	8000b14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000af8:	230f      	movs	r3, #15
 8000afa:	18fb      	adds	r3, r7, r3
 8000afc:	2201      	movs	r2, #1
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e008      	b.n	8000b14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b02:	230f      	movs	r3, #15
 8000b04:	18fb      	adds	r3, r7, r3
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
 8000b0a:	e003      	b.n	8000b14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	781b      	ldrb	r3, [r3, #0]
}
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b005      	add	sp, #20
 8000b20:	bd90      	pop	{r4, r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	20000018 	.word	0x20000018
 8000b28:	20000010 	.word	0x20000010
 8000b2c:	20000014 	.word	0x20000014

08000b30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b34:	4b05      	ldr	r3, [pc, #20]	; (8000b4c <HAL_IncTick+0x1c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	001a      	movs	r2, r3
 8000b3a:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <HAL_IncTick+0x20>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	18d2      	adds	r2, r2, r3
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_IncTick+0x20>)
 8000b42:	601a      	str	r2, [r3, #0]
}
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	20000018 	.word	0x20000018
 8000b50:	200000c0 	.word	0x200000c0

08000b54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  return uwTick;
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <HAL_GetTick+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
}
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	46c0      	nop			; (mov r8, r8)
 8000b64:	200000c0 	.word	0x200000c0

08000b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b70:	f7ff fff0 	bl	8000b54 <HAL_GetTick>
 8000b74:	0003      	movs	r3, r0
 8000b76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	d005      	beq.n	8000b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_Delay+0x44>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	f7ff ffe0 	bl	8000b54 <HAL_GetTick>
 8000b94:	0002      	movs	r2, r0
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d8f7      	bhi.n	8000b90 <HAL_Delay+0x28>
  {
  }
}
 8000ba0:	46c0      	nop			; (mov r8, r8)
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	b004      	add	sp, #16
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	20000018 	.word	0x20000018

08000bb0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	4b04      	ldr	r3, [pc, #16]	; (8000bd4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	601a      	str	r2, [r3, #0]
}
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	b002      	add	sp, #8
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	40010000 	.word	0x40010000
 8000bd8:	fffff9ff 	.word	0xfffff9ff

08000bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	0002      	movs	r2, r0
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	1dfb      	adds	r3, r7, #7
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b7f      	cmp	r3, #127	; 0x7f
 8000bee:	d809      	bhi.n	8000c04 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	001a      	movs	r2, r3
 8000bf6:	231f      	movs	r3, #31
 8000bf8:	401a      	ands	r2, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <__NVIC_EnableIRQ+0x30>)
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4091      	lsls	r1, r2
 8000c00:	000a      	movs	r2, r1
 8000c02:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	e000e100 	.word	0xe000e100

08000c10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	0002      	movs	r2, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b7f      	cmp	r3, #127	; 0x7f
 8000c24:	d828      	bhi.n	8000c78 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c26:	4a2f      	ldr	r2, [pc, #188]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c28:	1dfb      	adds	r3, r7, #7
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	089b      	lsrs	r3, r3, #2
 8000c30:	33c0      	adds	r3, #192	; 0xc0
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	589b      	ldr	r3, [r3, r2]
 8000c36:	1dfa      	adds	r2, r7, #7
 8000c38:	7812      	ldrb	r2, [r2, #0]
 8000c3a:	0011      	movs	r1, r2
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	400a      	ands	r2, r1
 8000c40:	00d2      	lsls	r2, r2, #3
 8000c42:	21ff      	movs	r1, #255	; 0xff
 8000c44:	4091      	lsls	r1, r2
 8000c46:	000a      	movs	r2, r1
 8000c48:	43d2      	mvns	r2, r2
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	019b      	lsls	r3, r3, #6
 8000c52:	22ff      	movs	r2, #255	; 0xff
 8000c54:	401a      	ands	r2, r3
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	4003      	ands	r3, r0
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c64:	481f      	ldr	r0, [pc, #124]	; (8000ce4 <__NVIC_SetPriority+0xd4>)
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b25b      	sxtb	r3, r3
 8000c6c:	089b      	lsrs	r3, r3, #2
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	33c0      	adds	r3, #192	; 0xc0
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c76:	e031      	b.n	8000cdc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c78:	4a1b      	ldr	r2, [pc, #108]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	0019      	movs	r1, r3
 8000c80:	230f      	movs	r3, #15
 8000c82:	400b      	ands	r3, r1
 8000c84:	3b08      	subs	r3, #8
 8000c86:	089b      	lsrs	r3, r3, #2
 8000c88:	3306      	adds	r3, #6
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	18d3      	adds	r3, r2, r3
 8000c8e:	3304      	adds	r3, #4
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	1dfa      	adds	r2, r7, #7
 8000c94:	7812      	ldrb	r2, [r2, #0]
 8000c96:	0011      	movs	r1, r2
 8000c98:	2203      	movs	r2, #3
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	00d2      	lsls	r2, r2, #3
 8000c9e:	21ff      	movs	r1, #255	; 0xff
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	43d2      	mvns	r2, r2
 8000ca6:	401a      	ands	r2, r3
 8000ca8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	019b      	lsls	r3, r3, #6
 8000cae:	22ff      	movs	r2, #255	; 0xff
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	1dfb      	adds	r3, r7, #7
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	2303      	movs	r3, #3
 8000cba:	4003      	ands	r3, r0
 8000cbc:	00db      	lsls	r3, r3, #3
 8000cbe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cc0:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <__NVIC_SetPriority+0xd8>)
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001c      	movs	r4, r3
 8000cc8:	230f      	movs	r3, #15
 8000cca:	4023      	ands	r3, r4
 8000ccc:	3b08      	subs	r3, #8
 8000cce:	089b      	lsrs	r3, r3, #2
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	3306      	adds	r3, #6
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	18c3      	adds	r3, r0, r3
 8000cd8:	3304      	adds	r3, #4
 8000cda:	601a      	str	r2, [r3, #0]
}
 8000cdc:	46c0      	nop			; (mov r8, r8)
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	b003      	add	sp, #12
 8000ce2:	bd90      	pop	{r4, r7, pc}
 8000ce4:	e000e100 	.word	0xe000e100
 8000ce8:	e000ed00 	.word	0xe000ed00

08000cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	1e5a      	subs	r2, r3, #1
 8000cf8:	2380      	movs	r3, #128	; 0x80
 8000cfa:	045b      	lsls	r3, r3, #17
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d301      	bcc.n	8000d04 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d00:	2301      	movs	r3, #1
 8000d02:	e010      	b.n	8000d26 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d04:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <SysTick_Config+0x44>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	425b      	negs	r3, r3
 8000d10:	2103      	movs	r1, #3
 8000d12:	0018      	movs	r0, r3
 8000d14:	f7ff ff7c 	bl	8000c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <SysTick_Config+0x44>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SysTick_Config+0x44>)
 8000d20:	2207      	movs	r2, #7
 8000d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d24:	2300      	movs	r3, #0
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b002      	add	sp, #8
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	46c0      	nop			; (mov r8, r8)
 8000d30:	e000e010 	.word	0xe000e010

08000d34 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b084      	sub	sp, #16
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	210f      	movs	r1, #15
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	1c02      	adds	r2, r0, #0
 8000d44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000d46:	68ba      	ldr	r2, [r7, #8]
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	b25b      	sxtb	r3, r3
 8000d4e:	0011      	movs	r1, r2
 8000d50:	0018      	movs	r0, r3
 8000d52:	f7ff ff5d 	bl	8000c10 <__NVIC_SetPriority>
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b004      	add	sp, #16
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	0002      	movs	r2, r0
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	0018      	movs	r0, r3
 8000d72:	f7ff ff33 	bl	8000bdc <__NVIC_EnableIRQ>
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	0018      	movs	r0, r3
 8000d8a:	f7ff ffaf 	bl	8000cec <SysTick_Config>
 8000d8e:	0003      	movs	r3, r0
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	b002      	add	sp, #8
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000da6:	e14d      	b.n	8001044 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2101      	movs	r1, #1
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4091      	lsls	r1, r2
 8000db2:	000a      	movs	r2, r1
 8000db4:	4013      	ands	r3, r2
 8000db6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d100      	bne.n	8000dc0 <HAL_GPIO_Init+0x28>
 8000dbe:	e13e      	b.n	800103e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d005      	beq.n	8000dd8 <HAL_GPIO_Init+0x40>
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d130      	bne.n	8000e3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	409a      	lsls	r2, r3
 8000de6:	0013      	movs	r3, r2
 8000de8:	43da      	mvns	r2, r3
 8000dea:	693b      	ldr	r3, [r7, #16]
 8000dec:	4013      	ands	r3, r2
 8000dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	409a      	lsls	r2, r3
 8000dfa:	0013      	movs	r3, r2
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e0e:	2201      	movs	r2, #1
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	409a      	lsls	r2, r3
 8000e14:	0013      	movs	r3, r2
 8000e16:	43da      	mvns	r2, r3
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	091b      	lsrs	r3, r3, #4
 8000e24:	2201      	movs	r2, #1
 8000e26:	401a      	ands	r2, r3
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2203      	movs	r2, #3
 8000e40:	4013      	ands	r3, r2
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d017      	beq.n	8000e76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	68db      	ldr	r3, [r3, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	409a      	lsls	r2, r3
 8000e54:	0013      	movs	r3, r2
 8000e56:	43da      	mvns	r2, r3
 8000e58:	693b      	ldr	r3, [r7, #16]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689a      	ldr	r2, [r3, #8]
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d123      	bne.n	8000eca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3208      	adds	r2, #8
 8000e8a:	0092      	lsls	r2, r2, #2
 8000e8c:	58d3      	ldr	r3, [r2, r3]
 8000e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2207      	movs	r2, #7
 8000e94:	4013      	ands	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	220f      	movs	r2, #15
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	691a      	ldr	r2, [r3, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2107      	movs	r1, #7
 8000eae:	400b      	ands	r3, r1
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	08da      	lsrs	r2, r3, #3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3208      	adds	r2, #8
 8000ec4:	0092      	lsls	r2, r2, #2
 8000ec6:	6939      	ldr	r1, [r7, #16]
 8000ec8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	409a      	lsls	r2, r3
 8000ed8:	0013      	movs	r3, r2
 8000eda:	43da      	mvns	r2, r3
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	401a      	ands	r2, r3
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685a      	ldr	r2, [r3, #4]
 8000f02:	23c0      	movs	r3, #192	; 0xc0
 8000f04:	029b      	lsls	r3, r3, #10
 8000f06:	4013      	ands	r3, r2
 8000f08:	d100      	bne.n	8000f0c <HAL_GPIO_Init+0x174>
 8000f0a:	e098      	b.n	800103e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f0c:	4a53      	ldr	r2, [pc, #332]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	089b      	lsrs	r3, r3, #2
 8000f12:	3318      	adds	r3, #24
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	589b      	ldr	r3, [r3, r2]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	4013      	ands	r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	220f      	movs	r2, #15
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	43da      	mvns	r2, r3
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	23a0      	movs	r3, #160	; 0xa0
 8000f34:	05db      	lsls	r3, r3, #23
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d019      	beq.n	8000f6e <HAL_GPIO_Init+0x1d6>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_GPIO_Init+0x2c8>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0x1d2>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2cc>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d00d      	beq.n	8000f66 <HAL_GPIO_Init+0x1ce>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d007      	beq.n	8000f62 <HAL_GPIO_Init+0x1ca>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a45      	ldr	r2, [pc, #276]	; (800106c <HAL_GPIO_Init+0x2d4>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d101      	bne.n	8000f5e <HAL_GPIO_Init+0x1c6>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e008      	b.n	8000f70 <HAL_GPIO_Init+0x1d8>
 8000f5e:	2305      	movs	r3, #5
 8000f60:	e006      	b.n	8000f70 <HAL_GPIO_Init+0x1d8>
 8000f62:	2303      	movs	r3, #3
 8000f64:	e004      	b.n	8000f70 <HAL_GPIO_Init+0x1d8>
 8000f66:	2302      	movs	r3, #2
 8000f68:	e002      	b.n	8000f70 <HAL_GPIO_Init+0x1d8>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <HAL_GPIO_Init+0x1d8>
 8000f6e:	2300      	movs	r3, #0
 8000f70:	697a      	ldr	r2, [r7, #20]
 8000f72:	2103      	movs	r1, #3
 8000f74:	400a      	ands	r2, r1
 8000f76:	00d2      	lsls	r2, r2, #3
 8000f78:	4093      	lsls	r3, r2
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f80:	4936      	ldr	r1, [pc, #216]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	089b      	lsrs	r3, r3, #2
 8000f86:	3318      	adds	r3, #24
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000f8e:	4a33      	ldr	r2, [pc, #204]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	58d3      	ldr	r3, [r2, r3]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	43da      	mvns	r2, r3
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685a      	ldr	r2, [r3, #4]
 8000fa4:	2380      	movs	r3, #128	; 0x80
 8000fa6:	025b      	lsls	r3, r3, #9
 8000fa8:	4013      	ands	r3, r2
 8000faa:	d003      	beq.n	8000fb4 <HAL_GPIO_Init+0x21c>
        {
          temp |= iocurrent;
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000fb4:	4929      	ldr	r1, [pc, #164]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000fbe:	2384      	movs	r3, #132	; 0x84
 8000fc0:	58d3      	ldr	r3, [r2, r3]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	029b      	lsls	r3, r3, #10
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x24a>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe2:	491e      	ldr	r1, [pc, #120]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000fe4:	2284      	movs	r2, #132	; 0x84
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685a      	ldr	r2, [r3, #4]
 8000ffe:	2380      	movs	r3, #128	; 0x80
 8001000:	035b      	lsls	r3, r3, #13
 8001002:	4013      	ands	r3, r2
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4313      	orrs	r3, r2
 800100c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001014:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_GPIO_Init+0x2c4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	43da      	mvns	r2, r3
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685a      	ldr	r2, [r3, #4]
 8001028:	2380      	movs	r3, #128	; 0x80
 800102a:	039b      	lsls	r3, r3, #14
 800102c:	4013      	ands	r3, r2
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001038:	4b08      	ldr	r3, [pc, #32]	; (800105c <HAL_GPIO_Init+0x2c4>)
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	40da      	lsrs	r2, r3
 800104c:	1e13      	subs	r3, r2, #0
 800104e:	d000      	beq.n	8001052 <HAL_GPIO_Init+0x2ba>
 8001050:	e6aa      	b.n	8000da8 <HAL_GPIO_Init+0x10>
  }
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46c0      	nop			; (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	b006      	add	sp, #24
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40021800 	.word	0x40021800
 8001060:	50000400 	.word	0x50000400
 8001064:	50000800 	.word	0x50000800
 8001068:	50000c00 	.word	0x50000c00
 800106c:	50001000 	.word	0x50001000

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	0008      	movs	r0, r1
 800107a:	0011      	movs	r1, r2
 800107c:	1cbb      	adds	r3, r7, #2
 800107e:	1c02      	adds	r2, r0, #0
 8001080:	801a      	strh	r2, [r3, #0]
 8001082:	1c7b      	adds	r3, r7, #1
 8001084:	1c0a      	adds	r2, r1, #0
 8001086:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001088:	1c7b      	adds	r3, r7, #1
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d004      	beq.n	800109a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001090:	1cbb      	adds	r3, r7, #2
 8001092:	881a      	ldrh	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001098:	e003      	b.n	80010a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800109a:	1cbb      	adds	r3, r7, #2
 800109c:	881a      	ldrh	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	0002      	movs	r2, r0
 80010b4:	1dbb      	adds	r3, r7, #6
 80010b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80010b8:	4b10      	ldr	r3, [pc, #64]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	1dba      	adds	r2, r7, #6
 80010be:	8812      	ldrh	r2, [r2, #0]
 80010c0:	4013      	ands	r3, r2
 80010c2:	d008      	beq.n	80010d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80010c4:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80010c6:	1dba      	adds	r2, r7, #6
 80010c8:	8812      	ldrh	r2, [r2, #0]
 80010ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80010cc:	1dbb      	adds	r3, r7, #6
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	0018      	movs	r0, r3
 80010d2:	f7ff fa1c 	bl	800050e <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	1dba      	adds	r2, r7, #6
 80010dc:	8812      	ldrh	r2, [r2, #0]
 80010de:	4013      	ands	r3, r2
 80010e0:	d008      	beq.n	80010f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80010e2:	4b06      	ldr	r3, [pc, #24]	; (80010fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80010e4:	1dba      	adds	r2, r7, #6
 80010e6:	8812      	ldrh	r2, [r2, #0]
 80010e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80010ea:	1dbb      	adds	r3, r7, #6
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f000 f806 	bl	8001100 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021800 	.word	0x40021800

08001100 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	0002      	movs	r2, r0
 8001108:	1dbb      	adds	r3, r7, #6
 800110a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800110c:	46c0      	nop			; (mov r8, r8)
 800110e:	46bd      	mov	sp, r7
 8001110:	b002      	add	sp, #8
 8001112:	bd80      	pop	{r7, pc}

08001114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a19      	ldr	r2, [pc, #100]	; (8001188 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001122:	4013      	ands	r3, r2
 8001124:	0019      	movs	r1, r3
 8001126:	4b17      	ldr	r3, [pc, #92]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	430a      	orrs	r2, r1
 800112c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	2380      	movs	r3, #128	; 0x80
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	429a      	cmp	r2, r3
 8001136:	d11f      	bne.n	8001178 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	0013      	movs	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	189b      	adds	r3, r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	4912      	ldr	r1, [pc, #72]	; (8001190 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001146:	0018      	movs	r0, r3
 8001148:	f7fe ffdc 	bl	8000104 <__udivsi3>
 800114c:	0003      	movs	r3, r0
 800114e:	3301      	adds	r3, #1
 8001150:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001152:	e008      	b.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3b01      	subs	r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	e001      	b.n	8001166 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e009      	b.n	800117a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001166:	4b07      	ldr	r3, [pc, #28]	; (8001184 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001168:	695a      	ldr	r2, [r3, #20]
 800116a:	2380      	movs	r3, #128	; 0x80
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	401a      	ands	r2, r3
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	429a      	cmp	r2, r3
 8001176:	d0ed      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	0018      	movs	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	b004      	add	sp, #16
 8001180:	bd80      	pop	{r7, pc}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	40007000 	.word	0x40007000
 8001188:	fffff9ff 	.word	0xfffff9ff
 800118c:	20000010 	.word	0x20000010
 8001190:	000f4240 	.word	0x000f4240

08001194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	f000 fb56 	bl	8001854 <HAL_RCC_OscConfig+0x6c0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2201      	movs	r2, #1
 80011ae:	4013      	ands	r3, r2
 80011b0:	d100      	bne.n	80011b4 <HAL_RCC_OscConfig+0x20>
 80011b2:	e07d      	b.n	80012b0 <HAL_RCC_OscConfig+0x11c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011b4:	4bc3      	ldr	r3, [pc, #780]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	2238      	movs	r2, #56	; 0x38
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011be:	4bc1      	ldr	r3, [pc, #772]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2203      	movs	r2, #3
 80011c4:	4013      	ands	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	2b10      	cmp	r3, #16
 80011cc:	d102      	bne.n	80011d4 <HAL_RCC_OscConfig+0x40>
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d002      	beq.n	80011da <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	2b08      	cmp	r3, #8
 80011d8:	d10c      	bne.n	80011f4 <HAL_RCC_OscConfig+0x60>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011da:	4bba      	ldr	r3, [pc, #744]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	2380      	movs	r3, #128	; 0x80
 80011e0:	029b      	lsls	r3, r3, #10
 80011e2:	4013      	ands	r3, r2
 80011e4:	d063      	beq.n	80012ae <HAL_RCC_OscConfig+0x11a>
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d15f      	bne.n	80012ae <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	f000 fb30 	bl	8001854 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	2380      	movs	r3, #128	; 0x80
 80011fa:	025b      	lsls	r3, r3, #9
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d107      	bne.n	8001210 <HAL_RCC_OscConfig+0x7c>
 8001200:	4bb0      	ldr	r3, [pc, #704]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	4baf      	ldr	r3, [pc, #700]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	0249      	lsls	r1, r1, #9
 800120a:	430a      	orrs	r2, r1
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	e020      	b.n	8001252 <HAL_RCC_OscConfig+0xbe>
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	685a      	ldr	r2, [r3, #4]
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	02db      	lsls	r3, r3, #11
 8001218:	429a      	cmp	r2, r3
 800121a:	d10e      	bne.n	800123a <HAL_RCC_OscConfig+0xa6>
 800121c:	4ba9      	ldr	r3, [pc, #676]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4ba8      	ldr	r3, [pc, #672]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001222:	2180      	movs	r1, #128	; 0x80
 8001224:	02c9      	lsls	r1, r1, #11
 8001226:	430a      	orrs	r2, r1
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	4ba6      	ldr	r3, [pc, #664]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	4ba5      	ldr	r3, [pc, #660]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001230:	2180      	movs	r1, #128	; 0x80
 8001232:	0249      	lsls	r1, r1, #9
 8001234:	430a      	orrs	r2, r1
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	e00b      	b.n	8001252 <HAL_RCC_OscConfig+0xbe>
 800123a:	4ba2      	ldr	r3, [pc, #648]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4ba1      	ldr	r3, [pc, #644]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001240:	49a1      	ldr	r1, [pc, #644]	; (80014c8 <HAL_RCC_OscConfig+0x334>)
 8001242:	400a      	ands	r2, r1
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	4b9f      	ldr	r3, [pc, #636]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	4b9e      	ldr	r3, [pc, #632]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800124c:	499f      	ldr	r1, [pc, #636]	; (80014cc <HAL_RCC_OscConfig+0x338>)
 800124e:	400a      	ands	r2, r1
 8001250:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d014      	beq.n	8001284 <HAL_RCC_OscConfig+0xf0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800125a:	f7ff fc7b 	bl	8000b54 <HAL_GetTick>
 800125e:	0003      	movs	r3, r0
 8001260:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0xe2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001264:	f7ff fc76 	bl	8000b54 <HAL_GetTick>
 8001268:	0002      	movs	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b64      	cmp	r3, #100	; 0x64
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0xe2>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e2ee      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001276:	4b93      	ldr	r3, [pc, #588]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001278:	681a      	ldr	r2, [r3, #0]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0xd0>
 8001282:	e015      	b.n	80012b0 <HAL_RCC_OscConfig+0x11c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001284:	f7ff fc66 	bl	8000b54 <HAL_GetTick>
 8001288:	0003      	movs	r3, r0
 800128a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800128c:	e008      	b.n	80012a0 <HAL_RCC_OscConfig+0x10c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800128e:	f7ff fc61 	bl	8000b54 <HAL_GetTick>
 8001292:	0002      	movs	r2, r0
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	1ad3      	subs	r3, r2, r3
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d901      	bls.n	80012a0 <HAL_RCC_OscConfig+0x10c>
          {
            return HAL_TIMEOUT;
 800129c:	2303      	movs	r3, #3
 800129e:	e2d9      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	029b      	lsls	r3, r3, #10
 80012a8:	4013      	ands	r3, r2
 80012aa:	d1f0      	bne.n	800128e <HAL_RCC_OscConfig+0xfa>
 80012ac:	e000      	b.n	80012b0 <HAL_RCC_OscConfig+0x11c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	2202      	movs	r2, #2
 80012b6:	4013      	ands	r3, r2
 80012b8:	d100      	bne.n	80012bc <HAL_RCC_OscConfig+0x128>
 80012ba:	e099      	b.n	80013f0 <HAL_RCC_OscConfig+0x25c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012bc:	4b81      	ldr	r3, [pc, #516]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	2238      	movs	r2, #56	; 0x38
 80012c2:	4013      	ands	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c6:	4b7f      	ldr	r3, [pc, #508]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	2203      	movs	r2, #3
 80012cc:	4013      	ands	r3, r2
 80012ce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b10      	cmp	r3, #16
 80012d4:	d102      	bne.n	80012dc <HAL_RCC_OscConfig+0x148>
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d002      	beq.n	80012e2 <HAL_RCC_OscConfig+0x14e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d135      	bne.n	800134e <HAL_RCC_OscConfig+0x1ba>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012e2:	4b78      	ldr	r3, [pc, #480]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	d005      	beq.n	80012fa <HAL_RCC_OscConfig+0x166>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	68db      	ldr	r3, [r3, #12]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x166>
      {
        return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e2ac      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012fa:	4b72      	ldr	r3, [pc, #456]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	4a74      	ldr	r2, [pc, #464]	; (80014d0 <HAL_RCC_OscConfig+0x33c>)
 8001300:	4013      	ands	r3, r2
 8001302:	0019      	movs	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	021a      	lsls	r2, r3, #8
 800130a:	4b6e      	ldr	r3, [pc, #440]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800130c:	430a      	orrs	r2, r1
 800130e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d112      	bne.n	800133c <HAL_RCC_OscConfig+0x1a8>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001316:	4b6b      	ldr	r3, [pc, #428]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6e      	ldr	r2, [pc, #440]	; (80014d4 <HAL_RCC_OscConfig+0x340>)
 800131c:	4013      	ands	r3, r2
 800131e:	0019      	movs	r1, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	691a      	ldr	r2, [r3, #16]
 8001324:	4b67      	ldr	r3, [pc, #412]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001326:	430a      	orrs	r2, r1
 8001328:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800132a:	4b66      	ldr	r3, [pc, #408]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0adb      	lsrs	r3, r3, #11
 8001330:	2207      	movs	r2, #7
 8001332:	4013      	ands	r3, r2
 8001334:	4a68      	ldr	r2, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x344>)
 8001336:	40da      	lsrs	r2, r3
 8001338:	4b68      	ldr	r3, [pc, #416]	; (80014dc <HAL_RCC_OscConfig+0x348>)
 800133a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x34c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	0018      	movs	r0, r3
 8001342:	f7ff fbab 	bl	8000a9c <HAL_InitTick>
 8001346:	1e03      	subs	r3, r0, #0
 8001348:	d051      	beq.n	80013ee <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e282      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d030      	beq.n	80013b8 <HAL_RCC_OscConfig+0x224>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001356:	4b5b      	ldr	r3, [pc, #364]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a5e      	ldr	r2, [pc, #376]	; (80014d4 <HAL_RCC_OscConfig+0x340>)
 800135c:	4013      	ands	r3, r2
 800135e:	0019      	movs	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	4b57      	ldr	r3, [pc, #348]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001366:	430a      	orrs	r2, r1
 8001368:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800136a:	4b56      	ldr	r3, [pc, #344]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0049      	lsls	r1, r1, #1
 8001374:	430a      	orrs	r2, r1
 8001376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fbec 	bl	8000b54 <HAL_GetTick>
 800137c:	0003      	movs	r3, r0
 800137e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001380:	e008      	b.n	8001394 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001382:	f7ff fbe7 	bl	8000b54 <HAL_GetTick>
 8001386:	0002      	movs	r2, r0
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d901      	bls.n	8001394 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001390:	2303      	movs	r3, #3
 8001392:	e25f      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001394:	4b4b      	ldr	r3, [pc, #300]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2380      	movs	r3, #128	; 0x80
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	4013      	ands	r3, r2
 800139e:	d0f0      	beq.n	8001382 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013a0:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4a4a      	ldr	r2, [pc, #296]	; (80014d0 <HAL_RCC_OscConfig+0x33c>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	0019      	movs	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	021a      	lsls	r2, r3, #8
 80013b0:	4b44      	ldr	r3, [pc, #272]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	e01b      	b.n	80013f0 <HAL_RCC_OscConfig+0x25c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80013b8:	4b42      	ldr	r3, [pc, #264]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b41      	ldr	r3, [pc, #260]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013be:	4949      	ldr	r1, [pc, #292]	; (80014e4 <HAL_RCC_OscConfig+0x350>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c4:	f7ff fbc6 	bl	8000b54 <HAL_GetTick>
 80013c8:	0003      	movs	r3, r0
 80013ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x24c>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ce:	f7ff fbc1 	bl	8000b54 <HAL_GetTick>
 80013d2:	0002      	movs	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x24c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e239      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4013      	ands	r3, r2
 80013ea:	d1f0      	bne.n	80013ce <HAL_RCC_OscConfig+0x23a>
 80013ec:	e000      	b.n	80013f0 <HAL_RCC_OscConfig+0x25c>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2208      	movs	r2, #8
 80013f6:	4013      	ands	r3, r2
 80013f8:	d047      	beq.n	800148a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013fa:	4b32      	ldr	r3, [pc, #200]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2238      	movs	r2, #56	; 0x38
 8001400:	4013      	ands	r3, r2
 8001402:	2b18      	cmp	r3, #24
 8001404:	d10a      	bne.n	800141c <HAL_RCC_OscConfig+0x288>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001406:	4b2f      	ldr	r3, [pc, #188]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d03c      	beq.n	800148a <HAL_RCC_OscConfig+0x2f6>
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d138      	bne.n	800148a <HAL_RCC_OscConfig+0x2f6>
      {
        return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e21b      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d019      	beq.n	8001458 <HAL_RCC_OscConfig+0x2c4>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001426:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800142a:	2101      	movs	r1, #1
 800142c:	430a      	orrs	r2, r1
 800142e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001430:	f7ff fb90 	bl	8000b54 <HAL_GetTick>
 8001434:	0003      	movs	r3, r0
 8001436:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x2b8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fb8b 	bl	8000b54 <HAL_GetTick>
 800143e:	0002      	movs	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x2b8>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e203      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800144c:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800144e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001450:	2202      	movs	r2, #2
 8001452:	4013      	ands	r3, r2
 8001454:	d0f1      	beq.n	800143a <HAL_RCC_OscConfig+0x2a6>
 8001456:	e018      	b.n	800148a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001458:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800145a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800145c:	4b19      	ldr	r3, [pc, #100]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 800145e:	2101      	movs	r1, #1
 8001460:	438a      	bics	r2, r1
 8001462:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001464:	f7ff fb76 	bl	8000b54 <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x2ec>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fb71 	bl	8000b54 <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x2ec>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1e9      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001480:	4b10      	ldr	r3, [pc, #64]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 8001482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d1f1      	bne.n	800146e <HAL_RCC_OscConfig+0x2da>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2204      	movs	r2, #4
 8001490:	4013      	ands	r3, r2
 8001492:	d100      	bne.n	8001496 <HAL_RCC_OscConfig+0x302>
 8001494:	e0c6      	b.n	8001624 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001496:	231f      	movs	r3, #31
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800149e:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2238      	movs	r2, #56	; 0x38
 80014a4:	4013      	ands	r3, r2
 80014a6:	2b20      	cmp	r3, #32
 80014a8:	d11e      	bne.n	80014e8 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80014aa:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_RCC_OscConfig+0x330>)
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	2202      	movs	r2, #2
 80014b0:	4013      	ands	r3, r2
 80014b2:	d100      	bne.n	80014b6 <HAL_RCC_OscConfig+0x322>
 80014b4:	e0b6      	b.n	8001624 <HAL_RCC_OscConfig+0x490>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d000      	beq.n	80014c0 <HAL_RCC_OscConfig+0x32c>
 80014be:	e0b1      	b.n	8001624 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	e1c7      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
 80014c4:	40021000 	.word	0x40021000
 80014c8:	fffeffff 	.word	0xfffeffff
 80014cc:	fffbffff 	.word	0xfffbffff
 80014d0:	ffff80ff 	.word	0xffff80ff
 80014d4:	ffffc7ff 	.word	0xffffc7ff
 80014d8:	00f42400 	.word	0x00f42400
 80014dc:	20000010 	.word	0x20000010
 80014e0:	20000014 	.word	0x20000014
 80014e4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014e8:	4bb8      	ldr	r3, [pc, #736]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80014ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	055b      	lsls	r3, r3, #21
 80014f0:	4013      	ands	r3, r2
 80014f2:	d101      	bne.n	80014f8 <HAL_RCC_OscConfig+0x364>
 80014f4:	2301      	movs	r3, #1
 80014f6:	e000      	b.n	80014fa <HAL_RCC_OscConfig+0x366>
 80014f8:	2300      	movs	r3, #0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d011      	beq.n	8001522 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4bb3      	ldr	r3, [pc, #716]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001500:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001502:	4bb2      	ldr	r3, [pc, #712]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	0549      	lsls	r1, r1, #21
 8001508:	430a      	orrs	r2, r1
 800150a:	63da      	str	r2, [r3, #60]	; 0x3c
 800150c:	4baf      	ldr	r3, [pc, #700]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800150e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	055b      	lsls	r3, r3, #21
 8001514:	4013      	ands	r3, r2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800151a:	231f      	movs	r3, #31
 800151c:	18fb      	adds	r3, r7, r3
 800151e:	2201      	movs	r2, #1
 8001520:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001522:	4bab      	ldr	r3, [pc, #684]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	2380      	movs	r3, #128	; 0x80
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d11a      	bne.n	8001564 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800152e:	4ba8      	ldr	r3, [pc, #672]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	4ba7      	ldr	r3, [pc, #668]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 8001534:	2180      	movs	r1, #128	; 0x80
 8001536:	0049      	lsls	r1, r1, #1
 8001538:	430a      	orrs	r2, r1
 800153a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800153c:	f7ff fb0a 	bl	8000b54 <HAL_GetTick>
 8001540:	0003      	movs	r3, r0
 8001542:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001546:	f7ff fb05 	bl	8000b54 <HAL_GetTick>
 800154a:	0002      	movs	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e17d      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001558:	4b9d      	ldr	r3, [pc, #628]	; (80017d0 <HAL_RCC_OscConfig+0x63c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	2380      	movs	r3, #128	; 0x80
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4013      	ands	r3, r2
 8001562:	d0f0      	beq.n	8001546 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d106      	bne.n	800157a <HAL_RCC_OscConfig+0x3e6>
 800156c:	4b97      	ldr	r3, [pc, #604]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800156e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001570:	4b96      	ldr	r3, [pc, #600]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001572:	2101      	movs	r1, #1
 8001574:	430a      	orrs	r2, r1
 8001576:	65da      	str	r2, [r3, #92]	; 0x5c
 8001578:	e01c      	b.n	80015b4 <HAL_RCC_OscConfig+0x420>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d10c      	bne.n	800159c <HAL_RCC_OscConfig+0x408>
 8001582:	4b92      	ldr	r3, [pc, #584]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001588:	2104      	movs	r1, #4
 800158a:	430a      	orrs	r2, r1
 800158c:	65da      	str	r2, [r3, #92]	; 0x5c
 800158e:	4b8f      	ldr	r3, [pc, #572]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001590:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001592:	4b8e      	ldr	r3, [pc, #568]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001594:	2101      	movs	r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	65da      	str	r2, [r3, #92]	; 0x5c
 800159a:	e00b      	b.n	80015b4 <HAL_RCC_OscConfig+0x420>
 800159c:	4b8b      	ldr	r3, [pc, #556]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800159e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015a0:	4b8a      	ldr	r3, [pc, #552]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80015a2:	2101      	movs	r1, #1
 80015a4:	438a      	bics	r2, r1
 80015a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015a8:	4b88      	ldr	r3, [pc, #544]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80015aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80015ac:	4b87      	ldr	r3, [pc, #540]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80015ae:	2104      	movs	r1, #4
 80015b0:	438a      	bics	r2, r1
 80015b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d014      	beq.n	80015e6 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff faca 	bl	8000b54 <HAL_GetTick>
 80015c0:	0003      	movs	r3, r0
 80015c2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015c4:	e009      	b.n	80015da <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c6:	f7ff fac5 	bl	8000b54 <HAL_GetTick>
 80015ca:	0002      	movs	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4a80      	ldr	r2, [pc, #512]	; (80017d4 <HAL_RCC_OscConfig+0x640>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e13c      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015da:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80015dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015de:	2202      	movs	r2, #2
 80015e0:	4013      	ands	r3, r2
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x432>
 80015e4:	e013      	b.n	800160e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fab5 	bl	8000b54 <HAL_GetTick>
 80015ea:	0003      	movs	r3, r0
 80015ec:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015ee:	e009      	b.n	8001604 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fab0 	bl	8000b54 <HAL_GetTick>
 80015f4:	0002      	movs	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	4a76      	ldr	r2, [pc, #472]	; (80017d4 <HAL_RCC_OscConfig+0x640>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e127      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001604:	4b71      	ldr	r3, [pc, #452]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001608:	2202      	movs	r2, #2
 800160a:	4013      	ands	r3, r2
 800160c:	d1f0      	bne.n	80015f0 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800160e:	231f      	movs	r3, #31
 8001610:	18fb      	adds	r3, r7, r3
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b01      	cmp	r3, #1
 8001616:	d105      	bne.n	8001624 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001618:	4b6c      	ldr	r3, [pc, #432]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800161a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800161c:	4b6b      	ldr	r3, [pc, #428]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800161e:	496e      	ldr	r1, [pc, #440]	; (80017d8 <HAL_RCC_OscConfig+0x644>)
 8001620:	400a      	ands	r2, r1
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2220      	movs	r2, #32
 800162a:	4013      	ands	r3, r2
 800162c:	d039      	beq.n	80016a2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d01b      	beq.n	800166e <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	4b64      	ldr	r3, [pc, #400]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800163c:	2180      	movs	r1, #128	; 0x80
 800163e:	03c9      	lsls	r1, r1, #15
 8001640:	430a      	orrs	r2, r1
 8001642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001644:	f7ff fa86 	bl	8000b54 <HAL_GetTick>
 8001648:	0003      	movs	r3, r0
 800164a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800164e:	f7ff fa81 	bl	8000b54 <HAL_GetTick>
 8001652:	0002      	movs	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e0f9      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8001660:	4b5a      	ldr	r3, [pc, #360]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	041b      	lsls	r3, r3, #16
 8001668:	4013      	ands	r3, r2
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x4ba>
 800166c:	e019      	b.n	80016a2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800166e:	4b57      	ldr	r3, [pc, #348]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	4b56      	ldr	r3, [pc, #344]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001674:	4959      	ldr	r1, [pc, #356]	; (80017dc <HAL_RCC_OscConfig+0x648>)
 8001676:	400a      	ands	r2, r1
 8001678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800167a:	f7ff fa6b 	bl	8000b54 <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001684:	f7ff fa66 	bl	8000b54 <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e0de      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8001696:	4b4d      	ldr	r3, [pc, #308]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d100      	bne.n	80016ac <HAL_RCC_OscConfig+0x518>
 80016aa:	e0d2      	b.n	8001852 <HAL_RCC_OscConfig+0x6be>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	2238      	movs	r2, #56	; 0x38
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b10      	cmp	r3, #16
 80016b6:	d100      	bne.n	80016ba <HAL_RCC_OscConfig+0x526>
 80016b8:	e081      	b.n	80017be <HAL_RCC_OscConfig+0x62a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d156      	bne.n	8001770 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	4b41      	ldr	r3, [pc, #260]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80016c8:	4945      	ldr	r1, [pc, #276]	; (80017e0 <HAL_RCC_OscConfig+0x64c>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff fa41 	bl	8000b54 <HAL_GetTick>
 80016d2:	0003      	movs	r3, r0
 80016d4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d8:	f7ff fa3c 	bl	8000b54 <HAL_GetTick>
 80016dc:	0002      	movs	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e0b4      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016ea:	4b38      	ldr	r3, [pc, #224]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	049b      	lsls	r3, r3, #18
 80016f2:	4013      	ands	r3, r2
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016f6:	4b35      	ldr	r3, [pc, #212]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	4a3a      	ldr	r2, [pc, #232]	; (80017e4 <HAL_RCC_OscConfig+0x650>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	0019      	movs	r1, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	431a      	orrs	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	431a      	orrs	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001722:	431a      	orrs	r2, r3
 8001724:	4b29      	ldr	r3, [pc, #164]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001726:	430a      	orrs	r2, r1
 8001728:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172a:	4b28      	ldr	r3, [pc, #160]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b27      	ldr	r3, [pc, #156]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001730:	2180      	movs	r1, #128	; 0x80
 8001732:	0449      	lsls	r1, r1, #17
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001738:	4b24      	ldr	r3, [pc, #144]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	4b23      	ldr	r3, [pc, #140]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	0549      	lsls	r1, r1, #21
 8001742:	430a      	orrs	r2, r1
 8001744:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001746:	f7ff fa05 	bl	8000b54 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001750:	f7ff fa00 	bl	8000b54 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e078      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	049b      	lsls	r3, r3, #18
 800176a:	4013      	ands	r3, r2
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x5bc>
 800176e:	e070      	b.n	8001852 <HAL_RCC_OscConfig+0x6be>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001776:	491a      	ldr	r1, [pc, #104]	; (80017e0 <HAL_RCC_OscConfig+0x64c>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 8001782:	2103      	movs	r1, #3
 8001784:	438a      	bics	r2, r1
 8001786:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800178a:	68da      	ldr	r2, [r3, #12]
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 800178e:	4916      	ldr	r1, [pc, #88]	; (80017e8 <HAL_RCC_OscConfig+0x654>)
 8001790:	400a      	ands	r2, r1
 8001792:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff f9de 	bl	8000b54 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x61c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179e:	f7ff f9d9 	bl	8000b54 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e051      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <HAL_RCC_OscConfig+0x638>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	049b      	lsls	r3, r3, #18
 80017b8:	4013      	ands	r3, r2
 80017ba:	d1f0      	bne.n	800179e <HAL_RCC_OscConfig+0x60a>
 80017bc:	e049      	b.n	8001852 <HAL_RCC_OscConfig+0x6be>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d112      	bne.n	80017ec <HAL_RCC_OscConfig+0x658>
      {
        return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e044      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
 80017ca:	46c0      	nop			; (mov r8, r8)
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40007000 	.word	0x40007000
 80017d4:	00001388 	.word	0x00001388
 80017d8:	efffffff 	.word	0xefffffff
 80017dc:	ffbfffff 	.word	0xffbfffff
 80017e0:	feffffff 	.word	0xfeffffff
 80017e4:	11c1808c 	.word	0x11c1808c
 80017e8:	eefeffff 	.word	0xeefeffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <HAL_RCC_OscConfig+0x6c8>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2203      	movs	r2, #3
 80017f6:	401a      	ands	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d126      	bne.n	800184e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	2270      	movs	r2, #112	; 0x70
 8001804:	401a      	ands	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800180a:	429a      	cmp	r2, r3
 800180c:	d11f      	bne.n	800184e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	23fe      	movs	r3, #254	; 0xfe
 8001812:	01db      	lsls	r3, r3, #7
 8001814:	401a      	ands	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d116      	bne.n	800184e <HAL_RCC_OscConfig+0x6ba>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	23f8      	movs	r3, #248	; 0xf8
 8001824:	039b      	lsls	r3, r3, #14
 8001826:	401a      	ands	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x6ba>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	23e0      	movs	r3, #224	; 0xe0
 8001834:	051b      	lsls	r3, r3, #20
 8001836:	401a      	ands	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800183c:	429a      	cmp	r2, r3
 800183e:	d106      	bne.n	800184e <HAL_RCC_OscConfig+0x6ba>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	0f5b      	lsrs	r3, r3, #29
 8001844:	075a      	lsls	r2, r3, #29
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800184a:	429a      	cmp	r2, r3
 800184c:	d001      	beq.n	8001852 <HAL_RCC_OscConfig+0x6be>
        {
          return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e000      	b.n	8001854 <HAL_RCC_OscConfig+0x6c0>
        }
      }
    }
  }
  return HAL_OK;
 8001852:	2300      	movs	r3, #0
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	b008      	add	sp, #32
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40021000 	.word	0x40021000

08001860 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0e9      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b76      	ldr	r3, [pc, #472]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2207      	movs	r2, #7
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d91e      	bls.n	80018c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b73      	ldr	r3, [pc, #460]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	4b70      	ldr	r3, [pc, #448]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001894:	f7ff f95e 	bl	8000b54 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800189c:	e009      	b.n	80018b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189e:	f7ff f959 	bl	8000b54 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	4a6a      	ldr	r2, [pc, #424]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e0ca      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018b2:	4b67      	ldr	r3, [pc, #412]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2207      	movs	r2, #7
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	4013      	ands	r3, r2
 80018c8:	d015      	beq.n	80018f6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2204      	movs	r2, #4
 80018d0:	4013      	ands	r3, r2
 80018d2:	d006      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018d4:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018d6:	689a      	ldr	r2, [r3, #8]
 80018d8:	4b5f      	ldr	r3, [pc, #380]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	21e0      	movs	r1, #224	; 0xe0
 80018dc:	01c9      	lsls	r1, r1, #7
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018e2:	4b5d      	ldr	r3, [pc, #372]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	4a5d      	ldr	r2, [pc, #372]	; (8001a5c <HAL_RCC_ClockConfig+0x1fc>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	4b59      	ldr	r3, [pc, #356]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80018f2:	430a      	orrs	r2, r1
 80018f4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2201      	movs	r2, #1
 80018fc:	4013      	ands	r3, r2
 80018fe:	d057      	beq.n	80019b0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d107      	bne.n	8001918 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001908:	4b53      	ldr	r3, [pc, #332]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2380      	movs	r3, #128	; 0x80
 800190e:	029b      	lsls	r3, r3, #10
 8001910:	4013      	ands	r3, r2
 8001912:	d12b      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e097      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d107      	bne.n	8001930 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001920:	4b4d      	ldr	r3, [pc, #308]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	2380      	movs	r3, #128	; 0x80
 8001926:	049b      	lsls	r3, r3, #18
 8001928:	4013      	ands	r3, r2
 800192a:	d11f      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e08b      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d107      	bne.n	8001948 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4013      	ands	r3, r2
 8001942:	d113      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e07f      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b03      	cmp	r3, #3
 800194e:	d106      	bne.n	800195e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001950:	4b41      	ldr	r3, [pc, #260]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	2202      	movs	r2, #2
 8001956:	4013      	ands	r3, r2
 8001958:	d108      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e074      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800195e:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2202      	movs	r2, #2
 8001964:	4013      	ands	r3, r2
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e06d      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800196c:	4b3a      	ldr	r3, [pc, #232]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	2207      	movs	r2, #7
 8001972:	4393      	bics	r3, r2
 8001974:	0019      	movs	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	4b37      	ldr	r3, [pc, #220]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 800197c:	430a      	orrs	r2, r1
 800197e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001980:	f7ff f8e8 	bl	8000b54 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001988:	e009      	b.n	800199e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800198a:	f7ff f8e3 	bl	8000b54 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e054      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800199e:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2238      	movs	r2, #56	; 0x38
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d1ec      	bne.n	800198a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019b0:	4b27      	ldr	r3, [pc, #156]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2207      	movs	r2, #7
 80019b6:	4013      	ands	r3, r2
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d21e      	bcs.n	80019fc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b24      	ldr	r3, [pc, #144]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2207      	movs	r2, #7
 80019c4:	4393      	bics	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019d0:	f7ff f8c0 	bl	8000b54 <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019d8:	e009      	b.n	80019ee <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019da:	f7ff f8bb 	bl	8000b54 <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <HAL_RCC_ClockConfig+0x1f4>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d901      	bls.n	80019ee <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019ea:	2303      	movs	r3, #3
 80019ec:	e02c      	b.n	8001a48 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2207      	movs	r2, #7
 80019f4:	4013      	ands	r3, r2
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d1ee      	bne.n	80019da <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d009      	beq.n	8001a1a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001a06:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_RCC_ClockConfig+0x200>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68da      	ldr	r2, [r3, #12]
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a16:	430a      	orrs	r2, r1
 8001a18:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001a1a:	f000 f829 	bl	8001a70 <HAL_RCC_GetSysClockFreq>
 8001a1e:	0001      	movs	r1, r0
 8001a20:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_ClockConfig+0x1f8>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	220f      	movs	r2, #15
 8001a28:	401a      	ands	r2, r3
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	; (8001a64 <HAL_RCC_ClockConfig+0x204>)
 8001a2c:	0092      	lsls	r2, r2, #2
 8001a2e:	58d3      	ldr	r3, [r2, r3]
 8001a30:	221f      	movs	r2, #31
 8001a32:	4013      	ands	r3, r2
 8001a34:	000a      	movs	r2, r1
 8001a36:	40da      	lsrs	r2, r3
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x208>)
 8001a3a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x20c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f7ff f82b 	bl	8000a9c <HAL_InitTick>
 8001a46:	0003      	movs	r3, r0
}
 8001a48:	0018      	movs	r0, r3
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b004      	add	sp, #16
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40022000 	.word	0x40022000
 8001a54:	00001388 	.word	0x00001388
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	fffff0ff 	.word	0xfffff0ff
 8001a60:	ffff8fff 	.word	0xffff8fff
 8001a64:	080026a0 	.word	0x080026a0
 8001a68:	20000010 	.word	0x20000010
 8001a6c:	20000014 	.word	0x20000014

08001a70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2238      	movs	r2, #56	; 0x38
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d10f      	bne.n	8001aa0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a80:	4b39      	ldr	r3, [pc, #228]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0adb      	lsrs	r3, r3, #11
 8001a86:	2207      	movs	r2, #7
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	409a      	lsls	r2, r3
 8001a8e:	0013      	movs	r3, r2
 8001a90:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	4835      	ldr	r0, [pc, #212]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a96:	f7fe fb35 	bl	8000104 <__udivsi3>
 8001a9a:	0003      	movs	r3, r0
 8001a9c:	613b      	str	r3, [r7, #16]
 8001a9e:	e05d      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aa0:	4b31      	ldr	r3, [pc, #196]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2238      	movs	r2, #56	; 0x38
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d102      	bne.n	8001ab2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e054      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab2:	4b2d      	ldr	r3, [pc, #180]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2238      	movs	r2, #56	; 0x38
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b10      	cmp	r3, #16
 8001abc:	d138      	bne.n	8001b30 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	2207      	movs	r2, #7
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d10d      	bne.n	8001af8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	4824      	ldr	r0, [pc, #144]	; (8001b70 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ae0:	f7fe fb10 	bl	8000104 <__udivsi3>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	0019      	movs	r1, r3
 8001ae8:	4b1f      	ldr	r3, [pc, #124]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	0a1b      	lsrs	r3, r3, #8
 8001aee:	227f      	movs	r2, #127	; 0x7f
 8001af0:	4013      	ands	r3, r2
 8001af2:	434b      	muls	r3, r1
 8001af4:	617b      	str	r3, [r7, #20]
        break;
 8001af6:	e00d      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	481c      	ldr	r0, [pc, #112]	; (8001b6c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001afc:	f7fe fb02 	bl	8000104 <__udivsi3>
 8001b00:	0003      	movs	r3, r0
 8001b02:	0019      	movs	r1, r3
 8001b04:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	0a1b      	lsrs	r3, r3, #8
 8001b0a:	227f      	movs	r2, #127	; 0x7f
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	434b      	muls	r3, r1
 8001b10:	617b      	str	r3, [r7, #20]
        break;
 8001b12:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001b14:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0f5b      	lsrs	r3, r3, #29
 8001b1a:	2207      	movs	r2, #7
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	3301      	adds	r3, #1
 8001b20:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	6978      	ldr	r0, [r7, #20]
 8001b26:	f7fe faed 	bl	8000104 <__udivsi3>
 8001b2a:	0003      	movs	r3, r0
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	e015      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2238      	movs	r2, #56	; 0x38
 8001b36:	4013      	ands	r3, r2
 8001b38:	2b20      	cmp	r3, #32
 8001b3a:	d103      	bne.n	8001b44 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	e00b      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2238      	movs	r2, #56	; 0x38
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b18      	cmp	r3, #24
 8001b4e:	d103      	bne.n	8001b58 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b50:	23fa      	movs	r3, #250	; 0xfa
 8001b52:	01db      	lsls	r3, r3, #7
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	e001      	b.n	8001b5c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001b5c:	693b      	ldr	r3, [r7, #16]
}
 8001b5e:	0018      	movs	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	b006      	add	sp, #24
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	00f42400 	.word	0x00f42400
 8001b70:	007a1200 	.word	0x007a1200

08001b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b7c:	2313      	movs	r3, #19
 8001b7e:	18fb      	adds	r3, r7, r3
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b84:	2312      	movs	r3, #18
 8001b86:	18fb      	adds	r3, r7, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	029b      	lsls	r3, r3, #10
 8001b94:	4013      	ands	r3, r2
 8001b96:	d100      	bne.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001b98:	e0ad      	b.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b9a:	2011      	movs	r0, #17
 8001b9c:	183b      	adds	r3, r7, r0
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001ba4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	055b      	lsls	r3, r3, #21
 8001baa:	4013      	ands	r3, r2
 8001bac:	d110      	bne.n	8001bd0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bb2:	4b43      	ldr	r3, [pc, #268]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bb4:	2180      	movs	r1, #128	; 0x80
 8001bb6:	0549      	lsls	r1, r1, #21
 8001bb8:	430a      	orrs	r2, r1
 8001bba:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bbc:	4b40      	ldr	r3, [pc, #256]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001bbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bc0:	2380      	movs	r3, #128	; 0x80
 8001bc2:	055b      	lsls	r3, r3, #21
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	183b      	adds	r3, r7, r0
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bd0:	4b3c      	ldr	r3, [pc, #240]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001bd6:	2180      	movs	r1, #128	; 0x80
 8001bd8:	0049      	lsls	r1, r1, #1
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001bde:	f7fe ffb9 	bl	8000b54 <HAL_GetTick>
 8001be2:	0003      	movs	r3, r0
 8001be4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001be6:	e00b      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001be8:	f7fe ffb4 	bl	8000b54 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d904      	bls.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001bf6:	2313      	movs	r3, #19
 8001bf8:	18fb      	adds	r3, r7, r3
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	701a      	strb	r2, [r3, #0]
        break;
 8001bfe:	e005      	b.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c00:	4b30      	ldr	r3, [pc, #192]	; (8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	2380      	movs	r3, #128	; 0x80
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4013      	ands	r3, r2
 8001c0a:	d0ed      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001c0c:	2313      	movs	r3, #19
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d15e      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c18:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c1a:	23c0      	movs	r3, #192	; 0xc0
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4013      	ands	r3, r2
 8001c20:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d019      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d014      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001c32:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c36:	4a24      	ldr	r2, [pc, #144]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001c3c:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c40:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c42:	2180      	movs	r1, #128	; 0x80
 8001c44:	0249      	lsls	r1, r1, #9
 8001c46:	430a      	orrs	r2, r1
 8001c48:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001c4a:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c4c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c50:	491e      	ldr	r1, [pc, #120]	; (8001ccc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8001c52:	400a      	ands	r2, r1
 8001c54:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c58:	697a      	ldr	r2, [r7, #20]
 8001c5a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4013      	ands	r3, r2
 8001c62:	d016      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c64:	f7fe ff76 	bl	8000b54 <HAL_GetTick>
 8001c68:	0003      	movs	r3, r0
 8001c6a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6c:	e00c      	b.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c6e:	f7fe ff71 	bl	8000b54 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d904      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001c7e:	2313      	movs	r3, #19
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	2203      	movs	r2, #3
 8001c84:	701a      	strb	r2, [r3, #0]
            break;
 8001c86:	e004      	b.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c88:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2202      	movs	r2, #2
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d0ed      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001c92:	2313      	movs	r3, #19
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001caa:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cb0:	e016      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001cb2:	2312      	movs	r3, #18
 8001cb4:	18fb      	adds	r3, r7, r3
 8001cb6:	2213      	movs	r2, #19
 8001cb8:	18ba      	adds	r2, r7, r2
 8001cba:	7812      	ldrb	r2, [r2, #0]
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	fffffcff 	.word	0xfffffcff
 8001ccc:	fffeffff 	.word	0xfffeffff
 8001cd0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001cd4:	2312      	movs	r3, #18
 8001cd6:	18fb      	adds	r3, r7, r3
 8001cd8:	2213      	movs	r2, #19
 8001cda:	18ba      	adds	r2, r7, r2
 8001cdc:	7812      	ldrb	r2, [r2, #0]
 8001cde:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ce0:	2311      	movs	r3, #17
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d105      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cea:	4bb6      	ldr	r3, [pc, #728]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cee:	4bb5      	ldr	r3, [pc, #724]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001cf0:	49b5      	ldr	r1, [pc, #724]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d00:	4bb0      	ldr	r3, [pc, #704]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d04:	2203      	movs	r2, #3
 8001d06:	4393      	bics	r3, r2
 8001d08:	0019      	movs	r1, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	4bad      	ldr	r3, [pc, #692]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d10:	430a      	orrs	r2, r1
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2202      	movs	r2, #2
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d1e:	4ba9      	ldr	r3, [pc, #676]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	220c      	movs	r2, #12
 8001d24:	4393      	bics	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	4ba5      	ldr	r3, [pc, #660]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	2204      	movs	r2, #4
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d009      	beq.n	8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d3c:	4ba1      	ldr	r3, [pc, #644]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	2230      	movs	r2, #48	; 0x30
 8001d42:	4393      	bics	r3, r2
 8001d44:	0019      	movs	r1, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	4b9e      	ldr	r3, [pc, #632]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2210      	movs	r2, #16
 8001d56:	4013      	ands	r3, r2
 8001d58:	d009      	beq.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d5a:	4b9a      	ldr	r3, [pc, #616]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5e:	4a9b      	ldr	r2, [pc, #620]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	0019      	movs	r1, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691a      	ldr	r2, [r3, #16]
 8001d68:	4b96      	ldr	r3, [pc, #600]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	015b      	lsls	r3, r3, #5
 8001d76:	4013      	ands	r3, r2
 8001d78:	d009      	beq.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8001d7a:	4b92      	ldr	r3, [pc, #584]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	4a94      	ldr	r2, [pc, #592]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	0019      	movs	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	4b8e      	ldr	r3, [pc, #568]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4013      	ands	r3, r2
 8001d98:	d009      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d9a:	4b8a      	ldr	r3, [pc, #552]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9e:	4a8d      	ldr	r2, [pc, #564]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	0019      	movs	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001da8:	4b86      	ldr	r3, [pc, #536]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	2380      	movs	r3, #128	; 0x80
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	4013      	ands	r3, r2
 8001db8:	d009      	beq.n	8001dce <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001dba:	4b82      	ldr	r3, [pc, #520]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	4a86      	ldr	r2, [pc, #536]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	0019      	movs	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dc8:	4b7e      	ldr	r3, [pc, #504]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d009      	beq.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dd8:	4b7a      	ldr	r3, [pc, #488]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ddc:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	0019      	movs	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	4b77      	ldr	r3, [pc, #476]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001de8:	430a      	orrs	r2, r1
 8001dea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2240      	movs	r2, #64	; 0x40
 8001df2:	4013      	ands	r3, r2
 8001df4:	d009      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001df6:	4b73      	ldr	r3, [pc, #460]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	4a79      	ldr	r2, [pc, #484]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	0019      	movs	r1, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	4b6f      	ldr	r3, [pc, #444]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e06:	430a      	orrs	r2, r1
 8001e08:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	01db      	lsls	r3, r3, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	d015      	beq.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e16:	4b6b      	ldr	r3, [pc, #428]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	0899      	lsrs	r1, r3, #2
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e22:	4b68      	ldr	r3, [pc, #416]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e24:	430a      	orrs	r2, r1
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	05db      	lsls	r3, r3, #23
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e34:	4b63      	ldr	r3, [pc, #396]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e36:	68da      	ldr	r2, [r3, #12]
 8001e38:	4b62      	ldr	r3, [pc, #392]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e3a:	2180      	movs	r1, #128	; 0x80
 8001e3c:	0249      	lsls	r1, r1, #9
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	031b      	lsls	r3, r3, #12
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d009      	beq.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	4393      	bics	r3, r2
 8001e56:	0019      	movs	r1, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e5c:	4b59      	ldr	r3, [pc, #356]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	2380      	movs	r3, #128	; 0x80
 8001e68:	039b      	lsls	r3, r3, #14
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d016      	beq.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001e6e:	4b55      	ldr	r3, [pc, #340]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e72:	4a5c      	ldr	r2, [pc, #368]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	0019      	movs	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e7c:	4b51      	ldr	r3, [pc, #324]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e86:	2380      	movs	r3, #128	; 0x80
 8001e88:	03db      	lsls	r3, r3, #15
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d106      	bne.n	8001e9c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001e8e:	4b4d      	ldr	r3, [pc, #308]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e90:	68da      	ldr	r2, [r3, #12]
 8001e92:	4b4c      	ldr	r3, [pc, #304]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001e94:	2180      	movs	r1, #128	; 0x80
 8001e96:	0449      	lsls	r1, r1, #17
 8001e98:	430a      	orrs	r2, r1
 8001e9a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	03db      	lsls	r3, r3, #15
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d016      	beq.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8001ea8:	4b46      	ldr	r3, [pc, #280]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	4a4e      	ldr	r2, [pc, #312]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001eb6:	4b43      	ldr	r3, [pc, #268]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	045b      	lsls	r3, r3, #17
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001ec8:	4b3e      	ldr	r3, [pc, #248]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	4b3d      	ldr	r3, [pc, #244]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	0449      	lsls	r1, r1, #17
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	011b      	lsls	r3, r3, #4
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d014      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001ee2:	4b38      	ldr	r3, [pc, #224]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	4393      	bics	r3, r2
 8001eea:	0019      	movs	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a1a      	ldr	r2, [r3, #32]
 8001ef0:	4b34      	ldr	r3, [pc, #208]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d106      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001efe:	4b31      	ldr	r3, [pc, #196]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f00:	68da      	ldr	r2, [r3, #12]
 8001f02:	4b30      	ldr	r3, [pc, #192]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f04:	2180      	movs	r1, #128	; 0x80
 8001f06:	0249      	lsls	r1, r1, #9
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	2380      	movs	r3, #128	; 0x80
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	4013      	ands	r3, r2
 8001f16:	d014      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	220c      	movs	r2, #12
 8001f1e:	4393      	bics	r3, r2
 8001f20:	0019      	movs	r1, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d106      	bne.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001f34:	4b23      	ldr	r3, [pc, #140]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f3a:	2180      	movs	r1, #128	; 0x80
 8001f3c:	0249      	lsls	r1, r1, #9
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	2380      	movs	r3, #128	; 0x80
 8001f48:	045b      	lsls	r3, r3, #17
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d016      	beq.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	4a22      	ldr	r2, [pc, #136]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	0019      	movs	r1, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f5c:	4b19      	ldr	r3, [pc, #100]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f66:	2380      	movs	r3, #128	; 0x80
 8001f68:	019b      	lsls	r3, r3, #6
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d106      	bne.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f70:	68da      	ldr	r2, [r3, #12]
 8001f72:	4b14      	ldr	r3, [pc, #80]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f74:	2180      	movs	r1, #128	; 0x80
 8001f76:	0449      	lsls	r1, r1, #17
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	2380      	movs	r3, #128	; 0x80
 8001f82:	049b      	lsls	r3, r3, #18
 8001f84:	4013      	ands	r3, r2
 8001f86:	d016      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f88:	4b0e      	ldr	r3, [pc, #56]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8001f8e:	4013      	ands	r3, r2
 8001f90:	0019      	movs	r1, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f96:	4b0b      	ldr	r3, [pc, #44]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d106      	bne.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8001fae:	2180      	movs	r1, #128	; 0x80
 8001fb0:	0449      	lsls	r1, r1, #17
 8001fb2:	430a      	orrs	r2, r1
 8001fb4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001fb6:	2312      	movs	r3, #18
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	781b      	ldrb	r3, [r3, #0]
}
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40021000 	.word	0x40021000
 8001fc8:	efffffff 	.word	0xefffffff
 8001fcc:	fffff3ff 	.word	0xfffff3ff
 8001fd0:	fffffcff 	.word	0xfffffcff
 8001fd4:	fff3ffff 	.word	0xfff3ffff
 8001fd8:	ffcfffff 	.word	0xffcfffff
 8001fdc:	ffffcfff 	.word	0xffffcfff
 8001fe0:	ffff3fff 	.word	0xffff3fff
 8001fe4:	ffbfffff 	.word	0xffbfffff
 8001fe8:	feffffff 	.word	0xfeffffff

08001fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d101      	bne.n	8001ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e04a      	b.n	8002094 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223d      	movs	r2, #61	; 0x3d
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d107      	bne.n	800201a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	223c      	movs	r2, #60	; 0x3c
 800200e:	2100      	movs	r1, #0
 8002010:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe fc9b 	bl	8000950 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	223d      	movs	r2, #61	; 0x3d
 800201e:	2102      	movs	r1, #2
 8002020:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	0019      	movs	r1, r3
 800202c:	0010      	movs	r0, r2
 800202e:	f000 f95b 	bl	80022e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2248      	movs	r2, #72	; 0x48
 8002036:	2101      	movs	r1, #1
 8002038:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	223e      	movs	r2, #62	; 0x3e
 800203e:	2101      	movs	r1, #1
 8002040:	5499      	strb	r1, [r3, r2]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	2101      	movs	r1, #1
 8002048:	5499      	strb	r1, [r3, r2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	2101      	movs	r1, #1
 8002050:	5499      	strb	r1, [r3, r2]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	2101      	movs	r1, #1
 8002058:	5499      	strb	r1, [r3, r2]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2242      	movs	r2, #66	; 0x42
 800205e:	2101      	movs	r1, #1
 8002060:	5499      	strb	r1, [r3, r2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2243      	movs	r2, #67	; 0x43
 8002066:	2101      	movs	r1, #1
 8002068:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2244      	movs	r2, #68	; 0x44
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2245      	movs	r2, #69	; 0x45
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2246      	movs	r2, #70	; 0x46
 800207e:	2101      	movs	r1, #1
 8002080:	5499      	strb	r1, [r3, r2]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2247      	movs	r2, #71	; 0x47
 8002086:	2101      	movs	r1, #1
 8002088:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	223d      	movs	r2, #61	; 0x3d
 800208e:	2101      	movs	r1, #1
 8002090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	223d      	movs	r2, #61	; 0x3d
 80020a8:	5c9b      	ldrb	r3, [r3, r2]
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d001      	beq.n	80020b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e03f      	b.n	8002134 <HAL_TIM_Base_Start+0x98>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	223d      	movs	r2, #61	; 0x3d
 80020b8:	2102      	movs	r1, #2
 80020ba:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1e      	ldr	r2, [pc, #120]	; (800213c <HAL_TIM_Base_Start+0xa0>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d014      	beq.n	80020f0 <HAL_TIM_Base_Start+0x54>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	2380      	movs	r3, #128	; 0x80
 80020cc:	05db      	lsls	r3, r3, #23
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d00e      	beq.n	80020f0 <HAL_TIM_Base_Start+0x54>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a1a      	ldr	r2, [pc, #104]	; (8002140 <HAL_TIM_Base_Start+0xa4>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d009      	beq.n	80020f0 <HAL_TIM_Base_Start+0x54>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	; (8002144 <HAL_TIM_Base_Start+0xa8>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d004      	beq.n	80020f0 <HAL_TIM_Base_Start+0x54>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a17      	ldr	r2, [pc, #92]	; (8002148 <HAL_TIM_Base_Start+0xac>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d116      	bne.n	800211e <HAL_TIM_Base_Start+0x82>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4a15      	ldr	r2, [pc, #84]	; (800214c <HAL_TIM_Base_Start+0xb0>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2b06      	cmp	r3, #6
 8002100:	d016      	beq.n	8002130 <HAL_TIM_Base_Start+0x94>
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	2380      	movs	r3, #128	; 0x80
 8002106:	025b      	lsls	r3, r3, #9
 8002108:	429a      	cmp	r2, r3
 800210a:	d011      	beq.n	8002130 <HAL_TIM_Base_Start+0x94>
    {
      __HAL_TIM_ENABLE(htim);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	2101      	movs	r1, #1
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800211c:	e008      	b.n	8002130 <HAL_TIM_Base_Start+0x94>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	430a      	orrs	r2, r1
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	e000      	b.n	8002132 <HAL_TIM_Base_Start+0x96>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002130:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	0018      	movs	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	b004      	add	sp, #16
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40012c00 	.word	0x40012c00
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40014000 	.word	0x40014000
 800214c:	00010007 	.word	0x00010007

08002150 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	223c      	movs	r2, #60	; 0x3c
 800215e:	5c9b      	ldrb	r3, [r3, r2]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_TIM_ConfigClockSource+0x18>
 8002164:	2302      	movs	r3, #2
 8002166:	e0b7      	b.n	80022d8 <HAL_TIM_ConfigClockSource+0x188>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	223c      	movs	r2, #60	; 0x3c
 800216c:	2101      	movs	r1, #1
 800216e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	223d      	movs	r2, #61	; 0x3d
 8002174:	2102      	movs	r1, #2
 8002176:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <HAL_TIM_ConfigClockSource+0x190>)
 8002184:	4013      	ands	r3, r2
 8002186:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4a56      	ldr	r2, [pc, #344]	; (80022e4 <HAL_TIM_ConfigClockSource+0x194>)
 800218c:	4013      	ands	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2280      	movs	r2, #128	; 0x80
 800219e:	0192      	lsls	r2, r2, #6
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d040      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xd6>
 80021a4:	2280      	movs	r2, #128	; 0x80
 80021a6:	0192      	lsls	r2, r2, #6
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d900      	bls.n	80021ae <HAL_TIM_ConfigClockSource+0x5e>
 80021ac:	e088      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021ae:	2280      	movs	r2, #128	; 0x80
 80021b0:	0152      	lsls	r2, r2, #5
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d100      	bne.n	80021b8 <HAL_TIM_ConfigClockSource+0x68>
 80021b6:	e085      	b.n	80022c4 <HAL_TIM_ConfigClockSource+0x174>
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	0152      	lsls	r2, r2, #5
 80021bc:	4293      	cmp	r3, r2
 80021be:	d900      	bls.n	80021c2 <HAL_TIM_ConfigClockSource+0x72>
 80021c0:	e07e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021c2:	2b70      	cmp	r3, #112	; 0x70
 80021c4:	d018      	beq.n	80021f8 <HAL_TIM_ConfigClockSource+0xa8>
 80021c6:	d900      	bls.n	80021ca <HAL_TIM_ConfigClockSource+0x7a>
 80021c8:	e07a      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021ca:	2b60      	cmp	r3, #96	; 0x60
 80021cc:	d04f      	beq.n	800226e <HAL_TIM_ConfigClockSource+0x11e>
 80021ce:	d900      	bls.n	80021d2 <HAL_TIM_ConfigClockSource+0x82>
 80021d0:	e076      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021d2:	2b50      	cmp	r3, #80	; 0x50
 80021d4:	d03b      	beq.n	800224e <HAL_TIM_ConfigClockSource+0xfe>
 80021d6:	d900      	bls.n	80021da <HAL_TIM_ConfigClockSource+0x8a>
 80021d8:	e072      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021da:	2b40      	cmp	r3, #64	; 0x40
 80021dc:	d057      	beq.n	800228e <HAL_TIM_ConfigClockSource+0x13e>
 80021de:	d900      	bls.n	80021e2 <HAL_TIM_ConfigClockSource+0x92>
 80021e0:	e06e      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021e2:	2b30      	cmp	r3, #48	; 0x30
 80021e4:	d063      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x15e>
 80021e6:	d86b      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021e8:	2b20      	cmp	r3, #32
 80021ea:	d060      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x15e>
 80021ec:	d868      	bhi.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d05d      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x15e>
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d05b      	beq.n	80022ae <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80021f6:	e063      	b.n	80022c0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6818      	ldr	r0, [r3, #0]
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f000 f974 	bl	80024f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2277      	movs	r2, #119	; 0x77
 8002218:	4313      	orrs	r3, r2
 800221a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	609a      	str	r2, [r3, #8]
      break;
 8002224:	e04f      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6899      	ldr	r1, [r3, #8]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f000 f95d 	bl	80024f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	01c9      	lsls	r1, r1, #7
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
      break;
 800224c:	e03b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6859      	ldr	r1, [r3, #4]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	001a      	movs	r2, r3
 800225c:	f000 f8ce 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2150      	movs	r1, #80	; 0x50
 8002266:	0018      	movs	r0, r3
 8002268:	f000 f928 	bl	80024bc <TIM_ITRx_SetConfig>
      break;
 800226c:	e02b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	001a      	movs	r2, r3
 800227c:	f000 f8ec 	bl	8002458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2160      	movs	r1, #96	; 0x60
 8002286:	0018      	movs	r0, r3
 8002288:	f000 f918 	bl	80024bc <TIM_ITRx_SetConfig>
      break;
 800228c:	e01b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	6859      	ldr	r1, [r3, #4]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	001a      	movs	r2, r3
 800229c:	f000 f8ae 	bl	80023fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2140      	movs	r1, #64	; 0x40
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f908 	bl	80024bc <TIM_ITRx_SetConfig>
      break;
 80022ac:	e00b      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0019      	movs	r1, r3
 80022b8:	0010      	movs	r0, r2
 80022ba:	f000 f8ff 	bl	80024bc <TIM_ITRx_SetConfig>
        break;
 80022be:	e002      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80022c0:	46c0      	nop			; (mov r8, r8)
 80022c2:	e000      	b.n	80022c6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80022c4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223d      	movs	r2, #61	; 0x3d
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	223c      	movs	r2, #60	; 0x3c
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	0018      	movs	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	b004      	add	sp, #16
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	ffceff88 	.word	0xffceff88
 80022e4:	ffff00ff 	.word	0xffff00ff

080022e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a38      	ldr	r2, [pc, #224]	; (80023dc <TIM_Base_SetConfig+0xf4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00c      	beq.n	800231a <TIM_Base_SetConfig+0x32>
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	05db      	lsls	r3, r3, #23
 8002306:	429a      	cmp	r2, r3
 8002308:	d007      	beq.n	800231a <TIM_Base_SetConfig+0x32>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a34      	ldr	r2, [pc, #208]	; (80023e0 <TIM_Base_SetConfig+0xf8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d003      	beq.n	800231a <TIM_Base_SetConfig+0x32>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <TIM_Base_SetConfig+0xfc>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d108      	bne.n	800232c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2270      	movs	r2, #112	; 0x70
 800231e:	4393      	bics	r3, r2
 8002320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	4313      	orrs	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <TIM_Base_SetConfig+0xf4>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d01c      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	2380      	movs	r3, #128	; 0x80
 8002338:	05db      	lsls	r3, r3, #23
 800233a:	429a      	cmp	r2, r3
 800233c:	d017      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a27      	ldr	r2, [pc, #156]	; (80023e0 <TIM_Base_SetConfig+0xf8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a26      	ldr	r2, [pc, #152]	; (80023e4 <TIM_Base_SetConfig+0xfc>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00f      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a25      	ldr	r2, [pc, #148]	; (80023e8 <TIM_Base_SetConfig+0x100>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00b      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a24      	ldr	r2, [pc, #144]	; (80023ec <TIM_Base_SetConfig+0x104>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a23      	ldr	r2, [pc, #140]	; (80023f0 <TIM_Base_SetConfig+0x108>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d003      	beq.n	800236e <TIM_Base_SetConfig+0x86>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a22      	ldr	r2, [pc, #136]	; (80023f4 <TIM_Base_SetConfig+0x10c>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d108      	bne.n	8002380 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a21      	ldr	r2, [pc, #132]	; (80023f8 <TIM_Base_SetConfig+0x110>)
 8002372:	4013      	ands	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	4313      	orrs	r3, r2
 800237e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	4393      	bics	r3, r2
 8002386:	001a      	movs	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	695b      	ldr	r3, [r3, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a0c      	ldr	r2, [pc, #48]	; (80023dc <TIM_Base_SetConfig+0xf4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <TIM_Base_SetConfig+0xde>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <TIM_Base_SetConfig+0x104>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <TIM_Base_SetConfig+0xde>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0d      	ldr	r2, [pc, #52]	; (80023f0 <TIM_Base_SetConfig+0x108>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d003      	beq.n	80023c6 <TIM_Base_SetConfig+0xde>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a0c      	ldr	r2, [pc, #48]	; (80023f4 <TIM_Base_SetConfig+0x10c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d103      	bne.n	80023ce <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	691a      	ldr	r2, [r3, #16]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	615a      	str	r2, [r3, #20]
}
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40000400 	.word	0x40000400
 80023e4:	40000800 	.word	0x40000800
 80023e8:	40002000 	.word	0x40002000
 80023ec:	40014000 	.word	0x40014000
 80023f0:	40014400 	.word	0x40014400
 80023f4:	40014800 	.word	0x40014800
 80023f8:	fffffcff 	.word	0xfffffcff

080023fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2201      	movs	r2, #1
 8002414:	4393      	bics	r3, r2
 8002416:	001a      	movs	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	22f0      	movs	r2, #240	; 0xf0
 8002426:	4393      	bics	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	693a      	ldr	r2, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	220a      	movs	r2, #10
 8002438:	4393      	bics	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	4313      	orrs	r3, r2
 8002442:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	621a      	str	r2, [r3, #32]
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b006      	add	sp, #24
 8002456:	bd80      	pop	{r7, pc}

08002458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	2210      	movs	r2, #16
 800246a:	4393      	bics	r3, r2
 800246c:	001a      	movs	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	699b      	ldr	r3, [r3, #24]
 8002476:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <TIM_TI2_ConfigInputStage+0x60>)
 8002482:	4013      	ands	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	031b      	lsls	r3, r3, #12
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	4313      	orrs	r3, r2
 800248e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	22a0      	movs	r2, #160	; 0xa0
 8002494:	4393      	bics	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	621a      	str	r2, [r3, #32]
}
 80024ae:	46c0      	nop			; (mov r8, r8)
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b006      	add	sp, #24
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	ffff0fff 	.word	0xffff0fff

080024bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a08      	ldr	r2, [pc, #32]	; (80024f0 <TIM_ITRx_SetConfig+0x34>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	2207      	movs	r2, #7
 80024dc:	4313      	orrs	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	609a      	str	r2, [r3, #8]
}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	46bd      	mov	sp, r7
 80024ea:	b004      	add	sp, #16
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	46c0      	nop			; (mov r8, r8)
 80024f0:	ffcfff8f 	.word	0xffcfff8f

080024f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	4a09      	ldr	r2, [pc, #36]	; (8002530 <TIM_ETR_SetConfig+0x3c>)
 800250c:	4013      	ands	r3, r2
 800250e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	021a      	lsls	r2, r3, #8
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	431a      	orrs	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	4313      	orrs	r3, r2
 8002520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	609a      	str	r2, [r3, #8]
}
 8002528:	46c0      	nop			; (mov r8, r8)
 800252a:	46bd      	mov	sp, r7
 800252c:	b006      	add	sp, #24
 800252e:	bd80      	pop	{r7, pc}
 8002530:	ffff00ff 	.word	0xffff00ff

08002534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	223c      	movs	r2, #60	; 0x3c
 8002542:	5c9b      	ldrb	r3, [r3, r2]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002548:	2302      	movs	r3, #2
 800254a:	e05a      	b.n	8002602 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	223c      	movs	r2, #60	; 0x3c
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	223d      	movs	r2, #61	; 0x3d
 8002558:	2102      	movs	r1, #2
 800255a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a26      	ldr	r2, [pc, #152]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d108      	bne.n	8002588 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2270      	movs	r2, #112	; 0x70
 800258c:	4393      	bics	r3, r2
 800258e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a19      	ldr	r2, [pc, #100]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d014      	beq.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	05db      	lsls	r3, r3, #23
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d00e      	beq.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a15      	ldr	r2, [pc, #84]	; (8002614 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d009      	beq.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a14      	ldr	r2, [pc, #80]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d004      	beq.n	80025d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d10c      	bne.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2280      	movs	r2, #128	; 0x80
 80025da:	4393      	bics	r3, r2
 80025dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223d      	movs	r2, #61	; 0x3d
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223c      	movs	r2, #60	; 0x3c
 80025fc:	2100      	movs	r1, #0
 80025fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bd80      	pop	{r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	40012c00 	.word	0x40012c00
 8002610:	ff0fffff 	.word	0xff0fffff
 8002614:	40000400 	.word	0x40000400
 8002618:	40000800 	.word	0x40000800
 800261c:	40014000 	.word	0x40014000

08002620 <__libc_init_array>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	2600      	movs	r6, #0
 8002624:	4d0c      	ldr	r5, [pc, #48]	; (8002658 <__libc_init_array+0x38>)
 8002626:	4c0d      	ldr	r4, [pc, #52]	; (800265c <__libc_init_array+0x3c>)
 8002628:	1b64      	subs	r4, r4, r5
 800262a:	10a4      	asrs	r4, r4, #2
 800262c:	42a6      	cmp	r6, r4
 800262e:	d109      	bne.n	8002644 <__libc_init_array+0x24>
 8002630:	2600      	movs	r6, #0
 8002632:	f000 f821 	bl	8002678 <_init>
 8002636:	4d0a      	ldr	r5, [pc, #40]	; (8002660 <__libc_init_array+0x40>)
 8002638:	4c0a      	ldr	r4, [pc, #40]	; (8002664 <__libc_init_array+0x44>)
 800263a:	1b64      	subs	r4, r4, r5
 800263c:	10a4      	asrs	r4, r4, #2
 800263e:	42a6      	cmp	r6, r4
 8002640:	d105      	bne.n	800264e <__libc_init_array+0x2e>
 8002642:	bd70      	pop	{r4, r5, r6, pc}
 8002644:	00b3      	lsls	r3, r6, #2
 8002646:	58eb      	ldr	r3, [r5, r3]
 8002648:	4798      	blx	r3
 800264a:	3601      	adds	r6, #1
 800264c:	e7ee      	b.n	800262c <__libc_init_array+0xc>
 800264e:	00b3      	lsls	r3, r6, #2
 8002650:	58eb      	ldr	r3, [r5, r3]
 8002652:	4798      	blx	r3
 8002654:	3601      	adds	r6, #1
 8002656:	e7f2      	b.n	800263e <__libc_init_array+0x1e>
 8002658:	080026e0 	.word	0x080026e0
 800265c:	080026e0 	.word	0x080026e0
 8002660:	080026e0 	.word	0x080026e0
 8002664:	080026e4 	.word	0x080026e4

08002668 <memset>:
 8002668:	0003      	movs	r3, r0
 800266a:	1882      	adds	r2, r0, r2
 800266c:	4293      	cmp	r3, r2
 800266e:	d100      	bne.n	8002672 <memset+0xa>
 8002670:	4770      	bx	lr
 8002672:	7019      	strb	r1, [r3, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	e7f9      	b.n	800266c <memset+0x4>

08002678 <_init>:
 8002678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800267e:	bc08      	pop	{r3}
 8002680:	469e      	mov	lr, r3
 8002682:	4770      	bx	lr

08002684 <_fini>:
 8002684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268a:	bc08      	pop	{r3}
 800268c:	469e      	mov	lr, r3
 800268e:	4770      	bx	lr
